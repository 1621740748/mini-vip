<style lang="less">

  .weui-navbar__item{
    padding: 5px 0px;
  }

  .weui-tab__panel{
    padding-top: 40px;
  }

  .weui-navbar__slider{

  }
</style>

<template>
  <view class="weui-tab">
    <view class="weui-navbar">
      <block wx:for="{{list_views}}" wx:key="*this">
        <view id="{{index}}" class="weui-navbar__item {{activeIndex == index ? 'weui-bar__item_on' : ''}}" bindtap="viewClick">
          <view class="weui-navbar__title">{{item.label}}</view>
        </view>
      </block>
      <view class="weui-navbar__slider" style="left: {{sliderLeft}}px; transform: translateX({{sliderOffset}}px); -webkit-transform: translateX({{sliderOffset}}px);"></view>
    </view>
    <view class="weui-tab__panel">
      <!--<view class="weui-tab__content" hidden="{{activeIndex != 0}}">选项一的内容</view>-->
      <!--<view class="weui-tab__content" hidden="{{activeIndex != 1}}">选项二的内容</view>-->
      <!--<view class="weui-tab__content" hidden="{{activeIndex != 2}}">选项三的内容</view>-->
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import _ from 'underscore'

  export default class listView extends wepy.component {
    data = {
      list_views: [],
      activeIndex: 0,
      sliderLeft: 0,
      sliderOffset:0,
      offsetIndex: 0,
    };

    props = {
      object_name: String
    };

    watch  = {
      object_name: function (newValue, oldValue) {
        if(newValue){
          let list_views = this.$parent.$parent.bootstrap.objects[newValue].list_views;

          delete list_views['default'];

          this.list_views = list_views;

          const views_count = _.keys(this.list_views).length;

          const res = wx.getSystemInfoSync();

          const sliderWidth = 96;

          this.sliderLeft = (res.windowWidth / views_count - sliderWidth) / 2;

          this.sliderOffset = res.windowWidth / views_count * this.offsetIndex;

          if(views_count > 0){
            this.activeIndex = _.keys(list_views)[0];
          }

          this.$apply();
        }
      }
    };

    transformFilterToDev(filters){
      if(!filters){
        return '';
      }

      let query = [];
      filters.forEach((filter)=>{
        if(filter.length === 3){
          let key = filter[0];
          let operation = filter[1];
          let value = filter[2];

          if(value === '{userId}'){
            value = this.$parent.$parent.globalData.user._id;
          }

          if(operation === '='){
            if(value === false || value === true){
              query.push(`(${key} eq ${value})`)
            }else{
              query.push(`(${key} eq '${value}')`)
            }
          }
        }else{
          throw new Error('无效的filter', filter)
        }
      })

      return query.join(' and ')
    }

    getQueryFilters(list_view){
      return this.transformFilterToDev(list_view.filters);
    }

    onLoad(e){}

    methods = {
      viewClick: function (e) {

        if(e.currentTarget.id === this.activeIndex){
          return;
        }

        this.activeIndex = e.currentTarget.id;
        this.sliderOffset = e.currentTarget.offsetLeft;
        const filters = this.getQueryFilters(this.list_views[this.activeIndex]);
        this.$emit('confirm', filters);
        console.log('viewClick',this.activeIndex)
      }
    }
  }
</script>
