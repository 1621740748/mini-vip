<style>
  .btn-container {
    width: 100%;
    margin-top: 20px;
  }

  .submit-btn {
    background: #1B9AF7;
    color: #fff;
    margin: 15px 15px 0;
  }

  .weui-input-select {
    min-height:2.58823529em;
    line-height:2.58823529em;
  }
</style>
<template>
  <view class="form">
    <view class="weui-toptips weui-toptips_warn" wx:if="{{showTopTips}}">{{message}}</view>
    <view class="page__bd">
      <view class="weui-cells weui-cells_after-title">
        <repeat for="{{fields}}" key="index" index="index" item="item">
          <block wx:if="{{!item.hidden}}">
            <block wx:if="{{item.type === 'image' || item.type === 'video' || item.type === 'audio'}}">
              <view class="weui-cell" wx:if="{{item.readonly || !schema.allowEdit || args.action === 'read'}}">
                <view class="weui-cell__bd">
                  <view class="weui-uploader">
                    <view class="weui-uploader__hd">
                      <view class="weui-uploader__title">{{item.label}}</view>
                    </view>
                    <view class="weui-uploader__bd">
                      <view class="weui-uploader__file">
                        <image class="weui-uploader__img" mode="aspectFill"
                               src="{{util.formatImageUrl(values[item.name], baseUrl)}}"/>
                      </view>
                    </view>
                  </view>
                </view>
              </view>
              <view class="weui-cell" wx:else>
                <view class="weui-cell__bd">
                  <view class="weui-uploader">
                    <view class="weui-uploader__hd">
                      <view class="weui-uploader__title">{{item.label}}</view>
                      <!--<view class="weui-uploader__info">{{files.length}}/2</view>-->
                    </view>
                    <view class="weui-uploader__bd">
                      <view class="weui-uploader__files" id="uploaderFiles">
                        <block wx:if="{{item.multiple}}">
                          <repeat for="{{values[item.name]}}" key="*this" item="file">
                            <view class="weui-uploader__file" wx:if="{{item.type === 'image'}}" bindtap="previewImage"
                                  id="{{file}}">
                              <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                     mode="aspectFill"/>
                            </view>
                            <view class="weui-uploader__file" wx:elif="{{item.type === 'video'}}" bindtap="previewImage"
                                  id="{{file}}">
                              <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                     mode="aspectFill"/>
                            </view>
                            <view class="weui-uploader__file" wx:elif="{{item.type === 'audio'}}" bindtap="previewImage"
                                  id="{{file}}">
                              <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                     mode="aspectFill"/>
                            </view>
                          </repeat>
                        </block>
                        <block wx:else>
                          <view class="weui-uploader__file" bindtap="previewImage">
                            <image class="weui-uploader__img" src="{{util.formatImageUrl(values[item.name], baseUrl)}}"
                                   mode="aspectFill"/>
                          </view>
                        </block>
                      </view>
                      <view class="weui-uploader__input-box" wx:if="{{!hiddenButton[item.name]}}">
                        <view class="weui-uploader__input" bindtap="chooseFile" data-id="{{item.name}}"
                              data-multiple="{{item.multiple}}" data-type="{{item.type}}"></view>
                      </view>
                    </view>
                  </view>
                </view>
              </view>
            </block>
            <block wx:else>
              <block wx:if="{{item.readonly || !schema.allowEdit || args.action === 'read'}}">
                <view class="weui-cell">
                  <view class="weui-cell__hd">
                    <view class="weui-label">{{item.label}}</view>
                  </view>
                  <view class="weui-cell__bd" auto-height="true">
                    <view class="weui-input-readonly" auto-height="true">
                      {{util.transformFieldValue(item, values[item.name])}}
                    </view>
                  </view>
                </view>
              </block>
              <block wx:else>
                <view class="weui-cell weui-cell_input">
                  <view class="weui-cell__hd">
                    <view class="weui-label">{{item.label}}</view>
                  </view>
                  <view class="weui-cell__bd">
                    <input wx:if="{{item.type === 'text'}}" data-id="{{item.name}}" class="weui-input"
                           value="{{values[item.name]}}" bindchange="textChange"/>

                    <textarea wx:elif="{{item.type === 'textarea'}}" data-id="{{item.name}}"
                              class="weui-input weui-textarea"
                              auto-height="true" value="{{values[item.name]}}" bindblur="textChange"/>

                    <input wx:elif="{{item.type === 'number'}}" data-id="{{item.name}}" class="weui-input" type="number"
                           bindchange="textChange"/>

                    <view wx:elif="{{item.type === 'boolean'}}" data-id="{{item.name}}" class="weui-cell__ft">
                      <switch checked class="weui-input" data-id="{{item.name}}" bindchange="textChange"/>
                    </view>
<!--
                    <block wx:elif="{{item.type === 'select'}}">
                      <checkbox-group bindchange="checkboxChange" wx:if="{{item.multiple}}" data-id="{{item.name}}">
                        <repeat for="{{item.options}}" key="index" index="index" item="option">
                          <label class="weui-cell weui-check__label">
                            <checkbox class="weui-check" value="{{option.value}}" checked="{{option.checked}}"/>
                            <view class="weui-cell__hd weui-check__hd_in-checkbox">
                              <icon class="weui-icon-checkbox_circle" type="circle" size="23"
                                    wx:if="{{!option.checked}}"></icon>
                              <icon class="weui-icon-checkbox_success" type="success" size="23"
                                    wx:if="{{option.checked}}"></icon>
                            </view>
                            <view class="weui-cell__bd">{{option.label}}</view>
                          </label>
                        </repeat>
                      </checkbox-group>
                      <picker wx:else bindchange="selectChange" data-id="{{item.name}}"
                              range="{{item.options}}" range-key="label">
                        <view class="weui-input">{{item.options[pickerIndex[item.name]].label}}</view>
                      </picker>
                    </block>
-->
                    <navigator url="/pages/util/datetime?title={{item.label}}&key={{item.name}}" class="weui-input"
                               wx:elif="{{item.type === 'datetime'}}">
                      <view class="weui-cell__ft">{{values[item.name]}}</view>
                    </navigator>

                    <navigator url="/pages/util/select?title={{item.label}}&key={{item.name}}" class="weui-input-select"
                               wx:elif="{{item.type === 'select'}}">
                      <view class="weui-cell__ft11">{{util.transformFieldValue(item, values[item.name])}}</view>
                    </navigator>

                    <navigator url="/pages/util/select?title={{item.label}}&key={{item.name}}" class="weui-input-select"
                               wx:elif="{{item.type === 'master_detail' || item.type === 'lookup'}}">
                      <view class="weui-cell__ft11">{{util.transformFieldValue(item, values[item.name])}}</view>
                    </navigator>
<!--
                    <picker wx:elif="{{item.type === 'master_detail' || item.type === 'lookup'}}"
                            bindchange="optionChange" data-id="{{item.name}}"
                            range="{{fieldOptions[item.name]}}" range-key="label">
                      <view class="weui-input">{{fieldOptions[item.name][pickerIndex[item.name]].label}}</view>
                    </picker>
-->
                    <textarea class="weui-input weui-textarea" wx:elif="{{item.type === 'location'}}" auto-height="true"
                              value="{{values[item.name] && values[item.name].address}}"/>

                    <input wx:else class="weui-input" value="{{item.type}}"/>
                  </view>

                  <view class="weui-cell__ft weui-cell__ft_in-access"
                        wx:if="{{item.type === 'datetime' || item.type === 'select'}}"></view>
                  <view class="weui-cell__ft" wx:elif="{{item.type === 'location'}}">
                    <view class="weui-vcode-btn" @tap="getAddress" data-id="{{item.name}}">选择</view>
                  </view>
                </view>
              </block>
            </block>
          </block>
        </repeat>
      </view>

      <view class="btn-container" wx:if="{{args.action === 'edit' || args.action === 'create'}}">
        <button class="submit-btn" form-type="submit" @tap="submitForm" disabled="{{submitDisabled}}">提交</button>
      </view>

    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import {baseUrl} from '@/config';
  import util from '../wxs/util.wxs'

  import _ from 'underscore'

  export default class Form extends wepy.component {

    props = {
      args: {
        type: Object
      }
    }

    wxs = {
      util: util
    };

    data = {
      showTopTips: false,
      baseUrl: baseUrl,
      message: '',
      schema: {},
      values: {},
      pickerIndex: {},
      hiddenButton: {},
      fieldOptions: {},
      fields: {}
    };

    watch = {
      args: async function (newValue, oldValue) {
        if (!_.isEmpty(newValue)) {
          const object_name = newValue.object_name;
          const record_id = newValue.record_id;
          const action = newValue.action

          if (object_name) {
            const object = await this.$parent.$parent.get('objects', object_name);
            object.allowEdit = true
            this.schema = object;

            const pages = getCurrentPages();
            const page = pages[pages.length - 1];

            let title = object.label;

            if(object_name === 'spaces'){
              title = '商户';
            }

            if (action === 'create') {
              title = '创建' + title;
            } else if (action === 'edit') {
              title = '编辑' + title;
            }

            page.changeNavigationBarTitleText(title);

            this.$apply();
            if (object.fields) {
              const fields = object.fields;
              for (let field_name in fields) {
                let field = fields[field_name];
                if (field.reference_to) {
                  field.options = this.getReferenceTo(field.name, field.reference_to)
                }
              }
            }

            if(this.args.fields){
              let fields = {}
              _.forEach(this.args.fields.split(','), function (field_name) {
                fields[field_name] = object.fields[field_name]
              })
              this.fields = fields
            }else{
              this.fields = object.fields
            }

          }
          if (object_name && record_id && action != 'create') {
            console.log("this.fields", this.fields)
            let query_options = {
              $select: _.pluck(this.fields, "name").join(","),
              $filter: `_id eq ${record_id}`
            }
            let expand = []
            _.forEach(this.fields, (field) => {
              if ((field.type === 'lookup' || field.type === 'master_detail') && field.reference_to) {
                expand.push(`${field.name}($select=name)`)
              }
            });
            if (expand.length > 0) {
              query_options.$expand = expand.join(',')
            }
            const result = await this.$parent.$parent.query(object_name, query_options);
            if (result.value.length === 1) {
              this.values = result.value[0]
              delete this.values["@odata.id"]
              delete this.values["@odata.etag"]
              delete this.values["@odata.editLink"]
              delete this.values["_id"]
            }
            _.forEach(this.fields, (field) => {
              if (field.type === 'select' && field.multiple) {
                let fv = this.values[field.name];
                if (_.isArray(fv)) {
                  _.forEach(field.options, (option) => {
                    if (fv.includes(option.value)) {
                      option.checked = true
                    }
                  })
                }
              }
            });
            this.$apply()
          }
        }
      }
    };

    async onLoad() {

    }

    changeValue(key, value) {
      this.values[key] = value;
      this.$apply();
    }

    getObjectField(key){
      return this.fields[key]
    }

    transformValue(){
      const value = _.clone(this.values)
      const fields = this.fields
      _.forEach(value, (v, k)=>{
        console.log("k", k)
        console.log("v", v)
        if(fields[k].type === 'lookup' || fields[k].type === 'master_detail'){
          if(_.isObject(v)){
            value[k] = v._id
          }
        }
      });
      return value
    }

    async getReferenceTo(file_name, reference_to) {
      let query = {
        $select: 'name'
      };
      if (reference_to === 'users') {
        reference_to = 'space_users'
        query.$select = 'name,user'
      }

      const data = await this.$parent.$parent.query(reference_to, query)
      let options = []
      data.value.forEach(function (record) {
        if (reference_to === 'space_users') {
          options.push({label: record.name, value: record.user});
        } else {
          options.push({label: record.name, value: record._id});
        }
      });
      return options
//      this.fieldOptions[file_name] = options;
//      this.$apply();
//      console.log('this.fieldOptions', this.fieldOptions);
    }

    checkRequired() {
      const fields = this.fields
      console.log(fields)
      for (let field_name in fields) {
        let field = fields[field_name]
        console.log(field)
        if (field.required) {
          if (!this.values[field.name]) {
            this.showTopTips = true
            this.message = `请填写${field.label}`
            return false
          }
        }
      }
      return true
    }

    methods = {
      getAddress(e) {
        console.log(e);
        self = this;
        const key = e.target.dataset.id;
        wepy
          .chooseLocation()
          .then(res => {
            if (!self.values[key]) {
              self.values[key] = {}
            }
            self.values[key].address = res.address;
            self.values[key].latitude = res.latitude;
            self.values[key].longitude = res.longitude;
            self.$apply();
          })
          .catch(err => {
            if (err.errMsg == 'chooseLocation:fail auth deny') {
              wx.openSetting({
                success: res => {
                  if (res.authSetting['scope.userLocation']) {
                    self.methods.getAddress.call(self, e);
                  }
                }
              });
            }
          });
      },
      textChange(e) {
        const key = e.target.dataset.id
        console.log("text change" , key, e)
        this.values[key] = e.detail.value
      },
      selectChange(e) {
        const index = e.detail.value;
        const key = e.target.dataset.id
        this.pickerIndex[key] = index
        const value = this.fields[key].options[index].value
        this.values[key] = value
        this.$apply()
      },
      optionChange(e) {
        const index = e.detail.value;
        const key = e.target.dataset.id;
        this.pickerIndex[key] = index;
        const value = this.fieldOptions[key][index].value;
        this.values[key] = value;
        this.$apply()
      },
      checkboxChange: function (e) {
        const values = e.detail.value, key = e.target.dataset.id;
        let checkboxItems = _.clone(this.fields[key].options);
        for (let i = 0, lenI = checkboxItems.length; i < lenI; ++i) {
          checkboxItems[i].checked = false;

          for (let j = 0, lenJ = values.length; j < lenJ; ++j) {
            if (checkboxItems[i].value == values[j]) {
              checkboxItems[i].checked = true;
              break;
            }
          }
        }

        this.values[key] = values;
        this.$apply()
      },
      bindDateChange(e) {
        const key = e.target.dataset.id
        const date = e.detail.value

      },
      bindTimeChange(e) {
        const key = e.target.dataset.id
        const time = e.detail.value
      },
      async chooseFile(e) {
        const that = this;
        const key = e.target.dataset.id
        const multiple = e.target.dataset.multiple || false
        const type = e.target.dataset.type
        if (type === 'image') {
          let options = {
            sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
            sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
          }
          if (!multiple) {
            options.count = 1
          }
          const res = await wepy.chooseImage(options)
          // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
          if (!that.values[key]) {
            that.values[key] = []
          }

          that.values[key] = that.values[key].concat(res.tempFilePaths)

          if (!multiple) {
            that.hiddenButton[key] = true
          }

          that.$apply()

        } else if (type === 'video') {
          const res = await wepy.chooseVideo()
          if (!that.values[key]) {
            that.values[key] = []
          }
          that.values[key] = that.values[key].concat(res.tempFilePaths)

          if (!multiple) {
            that.hiddenButton[key] = true
          }
          that.$apply()
        }
      },
      previewImage: function (e) {
        wx.previewImage({
          current: e.currentTarget.id, // 当前显示图片的http链接
          urls: this.data.files // 需要预览的图片http链接列表
        })
      },
      async submitForm() {
        if (!this.checkRequired()) {
          return;
        }
        const value = this.transformValue()
        if (this.args.action === 'create') {
          await this.$parent.$parent.insert(this.args.object_name, value)
        }else if(this.args.action === 'edit'){
          await this.$parent.$parent.update(this.args.object_name, this.args.record_id, value)
        }
      }
    }
  }
</script>
