<style lang="less">
  .btn-container {
    width: 100%;
    margin-top: 20px;
  }

  .submit-btn {
    background: #1B9AF7;
    color: #fff;
    margin: 15px 15px 0;
  }

  /*先注释掉此样式，否则一行显示的特别高*/
  /*.weui-cell__ft{*/
    /*line-height:1.3em;*/
    /*padding-top:12px;*/
    /*padding-bottom:12px;*/
    /*min-height:1.2em;*/
    /*&.weui-cell_switch{*/
      /*padding-top:6px;*/
      /*padding-bottom:6px;*/
    /*}*/
  /*}*/

  .wide-cell{
    text-align: left;
    .wide-cell-label{
      color: #000;
    }
  }

  .open-setting{
    border: none !important;
    text-align: right;
    height: 2.58823529em;
    min-height: 2.58823529em;
    line-height: 2.58823529em;
    padding: 0;
    font-size: 17px;
    color: #808080;
    background: #FFFFFF;
  }

  .weui-cell_footer{
    margin-top: .3em;
    color: #808080;
    padding-left: 15px;
    padding-right: 15px;
    font-size: 14px;
  }

  .weui-label{
    width: auto;
    min-width: 80px;
  }

  .weui-textarea{
    min-height: 2.2em;
  }

  .weui-cells__blank-line {
    margin-top:20px;
    color:#999;
  }
</style>
<template>
  <view class="form" wx:if="{{is_loaded}}">
    <view class="weui-toptips weui-toptips_warn" wx:if="{{showTopTips}}">{{message}}</view>
    <view class="page__bd">
      <repeat for="{{groupFields}}" key="index_g" index="index_g" item="groupField">
        <block wx:if="{{groupField._groupText === '-'}}">
          <view class="weui-cells__blank-line"></view>
        </block>
        <block wx:elif="{{groupField._groupText}}">
          <view class="weui-cells__title">{{groupField._groupText}}</view>
        </block>
        <view class="weui-cells {{groupField._cellsClass}}">
          <repeat for="{{groupField.fields}}" key="index" index="index" item="item">
            <block wx:if="{{!item.hidden && !item.omit}}">
              <block wx:if="{{item.type === 'image' || item.type === 'video' || item.type === 'audio'}}">
                <block wx:if="{{item.multiple}}">
                  <view class="weui-cell" wx:if="{{item.readonly || !schema.allowEdit || args.action === 'read'}}" hover-class='weui-grid_active'>
                    <view class="weui-cell__bd">
                      <view class="weui-uploader">
                        <view class="weui-uploader__hd">
                          <view class="weui-uploader__title">{{item.label}}</view>
                        </view>
                        <view class="weui-uploader__bd">
                          <view class="weui-uploader__file">
                            <image class="weui-uploader__img" mode="aspectFill"
                                   src="{{util.formatImageUrl(values[item.name], baseUrl)}}"/>
                          </view>
                        </view>
                      </view>
                    </view>
                  </view>
                  <view wx:else class='weui-cell weui-cell_access' hover-class='weui-grid_active' data-value="{{values[item.name]}}" data-edit="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}" @tap.stop="navigateTo({{item}})">
                    <view class="weui-cell__bd">
                      <view class="weui-uploader">
                        <view class="weui-uploader__hd">
                          <view class="weui-uploader__title">{{item.label}}</view>
                        </view>
                        <view class="weui-uploader__bd">
                          <view class="weui-uploader__files" id="uploaderFiles">
                            <repeat for="{{values[item.name]}}" key="*this" item="file">
                              <view class="weui-uploader__file" wx:if="{{item.type === 'image'}}" bindtap="previewImage"
                                    id="{{file}}">
                                <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                       mode="aspectFill"/>
                              </view>
                              <view class="weui-uploader__file" wx:elif="{{item.type === 'video'}}" bindtap="previewImage"
                                    id="{{file}}">
                                <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                       mode="aspectFill"/>
                              </view>
                              <view class="weui-uploader__file" wx:elif="{{item.type === 'audio'}}" bindtap="previewImage"
                                    id="{{file}}">
                                <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                       mode="aspectFill"/>
                              </view>
                            </repeat>
                          </view>
                        </view>
                      </view>
                    </view>
                    <view class="weui-cell__ft weui-cell__ft_in-access" wx:if="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}"></view>
                  </view>
                </block>
                <block wx:else>
                  <view class='weui-cell weui-cell_access' hover-class='weui-grid_active' data-value="{{values[item.name]}}" data-edit="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}" @tap.stop="navigateTo({{item}})">
                    <view class="weui-cell__hd" >
                      <view class="weui-label">{{item.label}}</view>
                    </view>
                    <view class="weui-cell__bd" style="text-align:right;">
                      <image src="{{util.formatImageUrl(values[item.name], baseUrl)}}" class="weui-uploader__img" style="display:block;float:right" wx:if="{{item.type === 'image' && values[item.name]}}"/>
                      <video src="{{util.formatVideoUrl(values[item.name], baseUrl)}}" class="weui-uploader__img" style="display:block;float:right" wx:if="{{item.type === 'video' && values[item.name]}}">{{values[item.name]}}</video>
                    </view>
                    <view class="weui-cell__ft weui-cell__ft_in-access" wx:if="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}"></view>
                  </view>
                </block>
              </block>
              <block wx:elif="{{item.type === 'boolean'}}">
                <view class="weui-cell weui-cell_switch" hover-class='weui-grid_active'>
                  <view class="weui-cell__bd">{{item.label}}</view>
                  <view class="weui-cell__ft" data-id="{{item.name}}" >
                    <switch checked="{{values[item.name] || false}}" data-id="{{item.name}}" bindchange="textChange"/>
                  </view>
                </view>
              </block>
              <block wx:elif="{{item.type === 'text' && item.is_wide}}">
                <view class="weui-cell" hover-class='weui-grid_active'>
                  <view class="weui-cell__bd">
                    <block wx:if="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}">
                      <textarea class="weui-textarea-input" data-id="{{item.name}}" placeholder="{{item.label}}" value="{{util.transformFieldValue(item, values[item.name])}}" auto-height="true" bindblur="textChange"/>
                    </block>
                    <block wx:else>
                      <view class="weui-cell__ft wide-cell">{{util.transformFieldValue(item, values[item.name]) || item.label}}</view>
                    </block>
                  </view>
                </view>
              </block>
              <block wx:else>
                <view class='weui-cell weui-cell_access' hover-class='weui-grid_active' data-value="{{values[item.name]}}" data-edit="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}" @tap.stop="navigateTo({{item}})">
                  <block wx:if="{{item.type === 'textarea'}}">
                    <block wx:if="{{item.is_wide}}">
                      <view class="weui-cell__bd">
                        <block wx:if="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}">
                          <textarea class="weui-textarea" data-id="{{item.name}}" placeholder="{{item.label}}" value="{{util.transformFieldValue(item, values[item.name])}}" auto-height="true" bindblur="textChange" maxlength="-1"/>
                        </block>
                        <block wx:else>
                          <view class="weui-cell__ft wide-cell">{{util.transformFieldValue(item, values[item.name]) || item.label}}</view>
                        </block>
                      </view>
                    </block>
                    <block wx:else>
                      <view class="weui-cell__hd" wx:if="{{!values[item.name]}}">
                        <view class="weui-label">{{item.label}}</view>
                      </view>
                      <view class="weui-cell__bd">
                        <view class="weui-cell__ft wide-cell">{{util.transformFieldValue(item, values[item.name])}}</view>
                      </view>
                      <block wx:if="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}">
                        <view class="weui-cell__ft weui-cell__ft_in-access"></view>
                      </block>
                    </block>
                  </block>
                  <block wx:else>
                    <view class="weui-cell__hd">
                      <view class="weui-label">{{item.label}}</view>
                    </view>
                    <view class="weui-cell__bd">
                      <block wx:if="{{item.type === 'phone' && (item.readonly || !schema.allowEdit || args.action === 'read')}}">
                        <view class="weui-cell__ft" @tap="phoneCall(values[item.name])">{{values[item.name]}}uuuuuu</view>
                      </block>
                      <block wx:else>
                        <view class="weui-cell__ft">{{util.transformFieldValue(item, values[item.name])}}</view>
                      </block>
                    </view>
                    <block wx:if="{{!(item.readonly || !schema.allowEdit || args.action === 'read')}}">
                      <view class="weui-cell__ft weui-cell__ft_in-access"></view>
                    </block>
                  </block>
                </view>
              </block>
            </block>
          </repeat>
        </view>
        <view class="weui-cells__tips" wx:if="{{groupField._helpText}}">{{groupField._helpText}}</view>
      </repeat>

      <view class="btn-container" wx:if="{{args.action === 'edit' || args.action === 'create'}}">
        <button class="submit-btn" form-type="submit" @tap="submitForm" disabled="{{submitDisabled}}">保存</button>
        <button class="submit-btn" wx:if="{{!args.undeletable && args.action === 'edit' && schema.allowDelete}}" type="warn" @tap="removeRecord">删除</button>
      </view>

    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import {baseUrl, aliyunOSSEndpoint} from '@/config';
  import util from '../wxs/util.wxs'
  const utilJs = require('../utils/util.js');

  import _ from 'underscore'

  export default class Form extends wepy.component {

    props = {
      args: {
        type: Object
      }
    }

    wxs = {
      util: util,
    };

    data = {
      showTopTips: false,
      baseUrl: baseUrl,
      message: '',
      schema: {},
      values: {},
      pickerIndex: {},
      hiddenButton: {},
      fieldOptions: {},
      fields: {},
      showOpenSetting: false,
      is_loaded: false,
      groupFields: [],
      submitDisabled: false,
    };

    getGroupFields(fields){
      let groupFields = [];
      let groupItem = {fields: {}, _groupText:'-', _helpText:'', _cellsClass: ''};
      _.forEach(fields, function (field, key) {
        if(!field){
         throw new Error('无效的字段: ' + key)
        }
        if(!field.hidden && !field.omit){
          if(field.group){
            if(!_.isEmpty(groupItem.fields)){
              groupFields.push(groupItem);
              groupItem = {fields: {}, _groupText:'', _helpText:'', _cellsClass: ''};
            }
            groupItem.fields[key] = field;
            groupItem._groupText = field.group;
            groupItem._cellsClass = 'weui-cells_after-title'

          }else if(field.inlineHelpText){
            groupItem.fields[key] = field;
            groupItem._helpText = field.inlineHelpText;
            groupFields.push(groupItem);
            groupItem = {fields: {}, _groupText:'', _helpText:'', _cellsClass: ''};
          }
          else{
            groupItem.fields[key] = field
          }
        }
      });

      if(!_.isEmpty(groupItem.fields)){
        groupFields.push(groupItem);
      }
      return groupFields
    }

    watch = {
      args: async function (newValue, oldValue) {
        if (!_.isEmpty(newValue)) {
          const object_name = newValue.object_name;
          const record_id = newValue.record_id;
          const action = newValue.action;
          let title = newValue.title;

          if (object_name) {
            const object = await this.$parent.$parent.get('objects', object_name);
            object.allowEdit = true;
            this.schema = object;

            const pages = getCurrentPages();
            const page = pages[pages.length - 1];

            if(!title){
              title = object.label;
              if (object_name === 'spaces') {
                title = '商户';
              }
              if (action === 'create') {
                title = '创建' + title;
              } else if (action === 'edit') {
                title = '编辑' + title;
              }
            }

            page.changeNavigationBarTitleText(title);

            this.$apply();
            if (object.fields) {
              const fields = object.fields;
              for (let field_name in fields) {
                let field = fields[field_name];
                if(!field.label){
                  field.label = field_name
                }
                if (field.reference_to) {
                  field.options = await this.getReferenceTo(field.name, field.reference_to)
                }
              }
            }

            if (this.args.fields) {
              let fields = {}
              _.forEach(this.args.fields.split(','), function (field_name) {
                fields[field_name] = object.fields[field_name]
              })
              this.fields = fields
            } else {
              this.fields = object.fields
            }
            this.groupFields = this.getGroupFields(this.fields);
          }
          if (object_name && record_id && action != 'create') {
            var keys = []
            _.forEach(this.fields, (v, k)=> {
              if (!v.hidden && !v.omit) {
                keys.push(k)
              }
            })
            let query_options = {
              $select: keys.join(","),
              $filter: `_id eq '${record_id}'`
            }
            let expand = []
            _.forEach(this.fields, (field) => {
              if ((field.type === 'lookup' || field.type === 'master_detail') && field.reference_to) {
                expand.push(`${field.name}($select=name)`)
              }
            });
            if (expand.length > 0) {
              query_options.$expand = expand.join(',')
            }
            const result = await this.$parent.$parent.query(object_name, query_options);
            if (result.value.length === 1) {
              this.values = result.value[0]
              delete this.values["@odata.id"]
              delete this.values["@odata.etag"]
              delete this.values["@odata.editLink"]
              delete this.values["_id"]
            }
            _.forEach(this.fields, (field) => {
              let fv = this.values[field.name];
              if (fv) {
                if (field.type === 'select') {
                  if(field.multiple){
                    if (_.isArray(fv)) {
                      _.forEach(field.options, (option) => {
                        if (fv.includes(option.value)) {
                          option.checked = true
                        }
                      })
                    }
                  }else{
                    _.forEach(field.options, (option) => {
                      if (fv === option.value) {
                        option.checked = true
                      }
                    })
                  }
                }else if(field.type === 'lookup' || field.type === 'master_detail'){
                  if(field.multiple){
                    let _ids = _.pluck(fv, '_id')
                    _.forEach(field.options, (option) => {
                      if (_ids.includes(option.value)) {
                        option.checked = true
                      }
                    })
                  }else{
                    _.forEach(field.options, (option) => {
                      if (fv._id === option.value) {
                        option.checked = true
                      }
                    })
                  }
                }else if(field.type === 'datetime'){
                  this.values[field.name] = utilJs.formatTime(new Date(fv), '-', true)
                }
              }
            });
            this.$apply()
          }else{
            this.$apply()
          }
        }
        this.is_loaded = true
        this.$apply()
        wepy.hideLoading();
      }
    };

    async onLoad() {
      wepy.showLoading({
        title: '加载中',
        mask: true
      });
      const setting = await wepy.getSetting()
      if(setting.authSetting["scope.userLocation"] === false){
        this.showOpenSetting = true;
      }
      this.$apply()
    }

    changeValue(key, value) {
      this.values[key] = value;
      this.$apply();
    }

    getObjectField(key) {
      return this.fields[key]
    }

    isTempFile(filePath){
      return (new RegExp(":\/\/")).test(filePath)
    }

    async uploadVideo(filePath, field_name, record_id){
      const authToken = this.$parent.$parent.globalData.user.auth_token;
      const userId = this.$parent.$parent.globalData.user._id;
      const fileResult = await wepy.uploadFile({
        url: `${baseUrl}/s3/videos`,
        filePath: filePath,
        name: 'file',
        header: {
          'X-Auth-Token': authToken,
          'X-User-Id': userId
        }
      }).catch((err)=>{
        console.log("uploadVideo error...",err)
      });
      const fileData = JSON.parse(fileResult.data);
      if (fileData.errors || fileResult.statusCode != 200) {
        wx.showToast({
          title: "视频上传失败，请稍后再试",
          icon: "none"
        });
        return false;
      }else{
        return fileData
      }
    }

    async uploadVideos(record_id){
      const fields = this.fields;
      for (let k in fields) {
        let f = fields[k]
        if(f.type === 'video'){
          let fv = this.values[k];
          if(fv){
            if(this.isTempFile(fv)){
              const video = await this.uploadVideo(fv, k, record_id);
              if(video){
                this.values[k] = video._id;
                if (this.fields['video_url']) {
                  this.values['video_url'] = aliyunOSSEndpoint + 'videos/videos-' + video._id + '-' + encodeURIComponent(video.original.name)
                }
              }
            }
          }
        }
      }
    }

    async uploadImage(filePath, field_name, record_id){
      const imageInfo = await wepy.getImageInfo({
        src: filePath
      });
      let formData = {
        width: imageInfo.width,
        height: imageInfo.height,
        type: imageInfo.type,
        orientation: imageInfo.orientation,
        object_name: this.args.object_name,
        field_name: field_name,
        record_id: record_id
      };
      const authToken = this.$parent.$parent.globalData.user.auth_token;
      const userId = this.$parent.$parent.globalData.user._id;
      const fileResult = await wepy.uploadFile({
        url: `${baseUrl}/s3/images`,
        filePath: filePath,
        name: 'file',
        formData: formData,
        header: {
          'X-Auth-Token': authToken,
          'X-User-Id': userId
        }
      }).catch((err)=>{
        console.log("error...",err)
      });
      const fileData = JSON.parse(fileResult.data);
      if (fileData.errors || fileResult.statusCode != 200) {
        wx.showToast({
          title: "图片上传失败，请稍后再试",
          icon: "none"
        });
        return false;
      }else{
        return fileData
      }
    }

    async uploadImages(record_id) {
      const fields = this.fields;
      for (let k in fields) {
        let f = fields[k]
        if(f.type === 'image'){
          if(f.multiple){
            let fv = this.values[k];
            if(_.isArray(fv)){
              let new_fv = []
              for (let v of fv){
                if(this.isTempFile(v)){
                  console.log("本地", v)
                  const image = await this.uploadImage(v, k, record_id);
                  if(image){
                    new_fv.push(image._id)
                  }
                }else{
                  console.log("非本地", v)
                  new_fv.push(v)
                }
              }
              this.values[k] = new_fv
            }
          }else{
            let fv = this.values[k];
            if(fv){
              if(this.isTempFile(fv)){
                const image = await this.uploadImage(fv, k, record_id);
                if(image){
                  this.values[k] = image._id
                }
              }
            }
          }
        }
      }
    }

    hasTempVideo(){
      const fields = this.fields
      for (let k in fields) {
        let f = fields[k]
        if (f.type === 'video') {
          let fv = this.values[k]
          if (fv) {
            if (this.isTempFile(fv)) {
              return true
            }
          }
        }
      }
    }

    hasTempImages(){
      const fields = this.fields;
      for (let k in fields) {
        let f = fields[k]
        if(f.type === 'image'){
          if(f.multiple){
            let fv = this.values[k];
            if(_.isArray(fv)){
              for (let v of fv){
                if(this.isTempFile(v)){
                  return true
                }
              }
            }
          }else{
            let fv = this.values[k];
            if(fv){
              if(this.isTempFile(fv)){
                return true
              }
            }
          }
        }
      }
    }

    transformValue() {
      const value = _.clone(this.values)
      const fields = this.fields;
      _.forEach(value, (v, k) => {
        let field = fields[k];
        if(!field){
          throw new Error('无效的key', k)
        }
        if (field.type === 'lookup' || field.type === 'master_detail') {
          if (field.multiple && _.isArray(v)){
            value[k] = _.compact(_.pluck(v, '_id'));
          }else if (_.isObject(v)) {
            value[k] = v._id
          }
        }
      });
      return value
    }

    async getReferenceTo(file_name, reference_to) {
      let query = {
        $select: 'name'
      };
      if (reference_to === 'users') {
        reference_to = 'space_users'
        query.$select = 'name,user'
      }

      const data = await this.$parent.$parent.query(reference_to, query)
      let options = []
      data.value.forEach(function (record) {
        if (reference_to === 'space_users') {
          options.push({label: record.name, value: record.user});
        } else {
          options.push({label: record.name, value: record._id});
        }
      });
      return options
    }

    checkRequired() {
      const fields = this.fields
      for (let field_name in fields) {
        let field = fields[field_name]
        if (field.required) {
          if (!this.values[field.name]) {
            this.showTopTips = true
            this.message = `请填写${field.label}`
            return false
          }
        }
      }
      return true
    }

    goBack(action) {
      const pages = getCurrentPages();
      const prevPage = pages[pages.length - 2];
      if (prevPage.refresh) {
        prevPage.refresh(action)
      }
      wepy.navigateBack({
        delta: 1
      })
    }

    methods = {
      openSetting(e){
        self = this;
        if(e.detail.authSetting["scope.userLocation"]){
          this.showOpenSetting = false;
          self.$apply();
          self.methods.getAddress.call(self, e);
        }
      },
      getAddress(e) {
        console.log(e);
        self = this;
        const key = e.target.dataset.id;
        wepy
          .chooseLocation()
          .then(res => {
            if (!self.values[key]) {
              self.values[key] = {}
            }
            self.values[key].address = res.address;
            self.values[key].latitude = res.latitude;
            self.values[key].longitude = res.longitude;
            self.$apply();
          })
          .catch(err => {
            console.log(err)
            if (err.errMsg == 'chooseLocation:fail auth deny') {
              self.showOpenSetting = true
              self.$apply()
            }
          });
      },
      textChange(e) {
        const key = e.target.dataset.id;
        this.values[key] = e.detail.value;
        this.$apply()
      },
      selectChange(e) {
        const index = e.detail.value;
        const key = e.target.dataset.id
        this.pickerIndex[key] = index
        const value = this.fields[key].options[index].value
        this.values[key] = value
        this.$apply()
      },
      optionChange(e) {
        const index = e.detail.value;
        const key = e.target.dataset.id;
        this.pickerIndex[key] = index;
        const value = this.fieldOptions[key][index].value;
        this.values[key] = value;
        this.$apply()
      },
      checkboxChange: function (e) {
        const values = e.detail.value, key = e.target.dataset.id;
        let checkboxItems = _.clone(this.fields[key].options);
        for (let i = 0, lenI = checkboxItems.length; i < lenI; ++i) {
          checkboxItems[i].checked = false;

          for (let j = 0, lenJ = values.length; j < lenJ; ++j) {
            if (checkboxItems[i].value == values[j]) {
              checkboxItems[i].checked = true;
              break;
            }
          }
        }

        this.values[key] = values;
        this.$apply()
      },
      bindDateChange(e) {
        const key = e.target.dataset.id
        const date = e.detail.value

      },
      bindTimeChange(e) {
        const key = e.target.dataset.id
        const time = e.detail.value
      },
      async chooseFile(e) {
        const that = this;
        const key = e.target.dataset.id
        const multiple = e.target.dataset.multiple || false
        const type = e.target.dataset.type
        if (type === 'image') {
          let options = {
            sizeType: ['original', 'compressed'],
            sourceType: ['album', 'camera'],
          }
          if (!multiple) {
            options.count = 1
          }
          const res = await wepy.chooseImage(options)
          if (!that.values[key]) {
            that.values[key] = []
          }

          that.values[key] = that.values[key].concat(res.tempFilePaths)

          if (!multiple) {
            that.hiddenButton[key] = true
          }

          that.$apply()

        } else if (type === 'video') {
          const res = await wepy.chooseVideo()
          if (!that.values[key]) {
            that.values[key] = []
          }
          that.values[key] = that.values[key].concat(res.tempFilePaths)

          if (!multiple) {
            that.hiddenButton[key] = true
          }
          that.$apply()
        }
      },
      previewImage: function (e) {
        wx.previewImage({
          current: e.currentTarget.id, // 当前显示图片的http链接
          urls: this.data.files // 需要预览的图片http链接列表
        })
      },
      async removeRecord() {
        if (this.args.action !== 'edit') {
          return;
        }
        if (this.args.undeletable) {
          return;
        }
        const result = await wepy.showModal({
          title: '确定要删除吗？',
          confirmText: "确定",
          content: "该操作不可逆，请谨慎操作。",
          cancelText: "取消",
        });
        if (result.confirm) {
          await this.$parent.$parent.delete(this.args.object_name, this.args.record_id)
          this.goBack("remove");
        }
      },
      async submitForm() {
        this.submitDisabled = true;
        if (!this.checkRequired()) {
          this.submitDisabled = false;
          return;
        }

        wx.showLoading({
          title: '正在保存',
          mask: true
        });

        if (this.args.action === 'create') {
          const value = this.transformValue();
          const record = await this.$parent.$parent.insert(this.args.object_name, value)

          if (this.hasTempImages()) {
            const record_id = record.value[0]._id
            await this.uploadImages(record_id);
            const value = this.transformValue();
            await this.$parent.$parent.update(this.args.object_name, record_id, value)
          }

          if (this.hasTempVideo()) {
            const record_id = record.value[0]._id
            await this.uploadVideos(record_id);
            const value = this.transformValue();
            await this.$parent.$parent.update(this.args.object_name, record_id, value)
          }

        } else if (this.args.action === 'edit') {
          //检查临时附件，如果有，则上传附件
          await this.uploadImages(this.args.record_id);
          await this.uploadVideos(this.args.record_id);
          const value = this.transformValue();
          await this.$parent.$parent.update(this.args.object_name, this.args.record_id, value)
        }
        this.goBack(this.args.action);
      },
      navigateTo(field, e){
        const dataset = e.currentTarget.dataset;
        if(!dataset.edit){
          return ;
        }

        if((field.type === 'text' || field.type === 'textarea' ) && field.is_wide){
          return;
        }

        let url = '';
        switch(field.type){
          case 'text':
            url = '/pages/edit/text';
            break;
          case 'phone':
            url = '/pages/edit/text';
            break;
          case 'textarea':
            url = '/pages/edit/textarea';
            break;
          case 'datetime':
            url = '/pages/edit/datetime';
            break;
          case 'lookup':
            url = '/pages/edit/lookup';
            break;
          case 'master_detail':
            url = '/pages/edit/lookup';
            break;
          case 'select':
            url = '/pages/edit/select';
            break;
          case 'image':
            url = '/pages/edit/image';
            break;
          case 'number':
            url = '/pages/edit/number';
            break;
          case 'currency':
            url = '/pages/edit/number';
            break;
          case 'location':
            url = '/pages/edit/location';
            break;
          case 'video':
            url = '/pages/edit/video';
            break;
        }

        if(!url){
          return ;
        }
        //给url上添加参数
        let value = dataset.value || ''
        if (value.constructor === Object) {
          value = JSON.stringify(dataset.value)
        }
        url = `${url}?key=${field.name}&title=${field.label}&value=${value}`;
        if(field.multiple){
          url = `${url}&multiple=${field.multiple}`
        }

        wepy.navigateTo({url: url});
      },
      phoneCall(number) {
        wepy.makePhoneCall({
          phoneNumber: number
        });
      }
    }
  }
</script>
