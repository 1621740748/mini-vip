<style lang="less">
  .record-form{
    .weui-cells{

      &:before{
        border-top: 0px;
      }

      &:after{
        border-bottom: 0px;
      }
    }

    .slds-icon-action-close{
      padding: 0.4rem;
    }

    .weui-cell__ft_in-access{
      display: none;
    }
    .weui-media-box__desc{
      text-overflow:unset;
      overflow:visible;
      -webkit-line-clamp:unset;
      line-height:1.4em;
      font-size: 17px;
    }
    .btn-container {
      width: 100%;
      margin-top: 20px;
    }

    .submit-btn {
      margin: 15px 15px 0;
    }

    /*.save-btn{*/
      /*background: #1B9AF7;*/
      /*color: #fff;*/
    /*}*/

    /*先注释掉此样式，否则一行显示的特别高*/
    /*.weui-cell__ft{*/
    /*line-height:1.3em;*/
    /*padding-top:12px;*/
    /*padding-bottom:12px;*/
    /*min-height:1.2em;*/
    /*&.weui-cell_switch{*/
    /*padding-top:6px;*/
    /*padding-bottom:6px;*/
    /*}*/
    /*}*/

    .wide-cell{
      text-align: left;
      .wide-cell-label{
        color: #000;
      }
    }

    .open-setting{
      border: none !important;
      text-align: right;
      height: 2.58823529em;
      min-height: 2.58823529em;
      line-height: 2.58823529em;
      padding: 0;
      font-size: 17px;
      color: #808080;
      background: #FFFFFF;
    }

    .weui-cell_footer{
      margin-top: .3em;
      color: #808080;
      padding-left: 15px;
      padding-right: 15px;
      font-size: 14px;
    }

    .weui-label{
      width: auto;
      min-width: 80px;
    }

    .weui-textarea{
      min-height: 2.2em;
    }

    .weui-cells__blank-line {
      margin-top:20px;
      color:#999;
    }

    .cover{
      width: 100%;
      height:480rpx;
    }

    .weui-cell_image{
      padding: 0px;
    }

    .page-section{
      width: 100%;
      margin-bottom: 60rpx;
    }
    .page-section_center{
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .page-section:last-child{
      margin-bottom: 0;
    }
    .page-section-gap{
      box-sizing: border-box;
      padding: 0 30rpx;
    }
    .page-section-spacing{
      box-sizing: border-box;
    }
    .page-section-title{
      font-size: 28rpx;
      color: #999999;
      margin-bottom: 10rpx;
      padding-left: 30rpx;
      padding-right: 30rpx;
    }
    .page-section-gap .page-section-title{
      padding-left: 0;
      padding-right: 0;
    }

    .swiper-item{
      display: block;
      height: 150px;
      width: 100%;
    }

    .weui-textarea-input{
      display:block;
      width:100%;
    }

    .remove-btn{
      color:#888;
    }

    .weui-cell__required{
      text-align:left;
      color:red;
      position:absolute;
      left: 5px;
      top: 14px;
    }

    .weui-cell__required:before{
      content:"*";
      color:red;
      padding-left: 3px;
    }

    .weui-uploader__title{
      padding-left: 6px;
    }

    .weui-cell_switch,.field-textarea{
      .weui-cell__bd{
        padding-left: 6px;
      }
    }

    .weui-cell__bd{
      color:#999;
      .weui-cell__ft{
        color: #000000;
        text-align: left;
      }
    }

    .weui-cell__hd{
      padding-left: 6px;
      .weui-label{
        color:#999;
      }
    }

    .weui-uploader__input-box{
      margin: 0px;
      height: 57px;
      width: 57px;
      border-radius: 5px;
    }

    .weui-uploader__img{
      height: 59px;
      width: 59px;
      border-radius: 5px;
    }

  }
</style>
<template>
  <view class="record-form" wx:if="{{is_loaded}}">
    <view class="weui-toptips weui-toptips_warn" wx:if="{{showTopTips}}">{{message}}</view>
    <form bindsubmit="submitForm" report-submit='true' >
      <view class="page__bd">
        <repeat for="{{groupFields}}" key="index_g" index="index_g" item="groupField">
          <block wx:if="{{groupField._groupText === '-'}}">
            <view class="weui-cells__blank-line"></view>
          </block>
          <block wx:elif="{{groupField._groupText}}">
            <view class="weui-cells__title">{{groupField._groupText}}</view>
          </block>
          <view class="weui-cells {{groupField._cellsClass}}">
            <repeat for="{{groupField.fields}}" key="index" index="index" item="item">
              <block wx:if="{{!item.hidden && !item.omit}}">
                <block wx:if="{{item.type === 'image' || item.type === 'video' || item.type === 'audio'}}">
                  <block wx:if="{{item.multiple}}">
                    <block wx:if="{{item.readonly || !_record_allowEdit || args.action === 'read'}}">
                      <block wx:if="{{!item._top}}">
                        <view class="weui-cell"  hover-class='weui-grid_active'>
                          <view class="weui-cell__bd">
                            <view class="weui-uploader">
                              <view class="weui-uploader__hd">
                                <view class="weui-uploader__title">{{item.label}}</view>
                              </view>
                              <view class="weui-uploader__bd">
                                <repeat for="{{values[item.name]}}" item="image_id">
                                  <view class="weui-uploader__file" bindtap="previewImage"
                                        id="{{image_id}}" data-key="{{item.name}}">
                                    <image class="weui-uploader__img" mode="aspectFill"
                                           src="{{util.formatImageUrl(image_id, baseUrl)}}" data-key="{{item.name}}"/>
                                  </view>
                                </repeat>
                              </view>
                            </view>
                          </view>
                        </view>
                      </block>
                      <block wx:else>
                        <view class="page-section page-section-spacing swiper">
                          <swiper
                            indicator-dots="true" autoplay="true" circular="true"
                            interval="3000" duration="500">
                            <repeat for="{{values[item.name]}}" item="image_id">
                              <swiper-item>
                                <image class="swiper-item" src="{{util.formatImageUrl(image_id, baseUrl)}}"/>
                              </swiper-item>
                            </repeat>
                          </swiper>
                        </view>
                      </block>
                    </block>
                    <block wx:else>
                      <view class='weui-cell weui-cell_access' data-value="{{values[item.name]}}" data-edit="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}">
                        <view class="weui-cell__required" wx:if="{{util.isRequired(args.action, item)}}"></view>
                        <view class="weui-cell__bd">
                          <view class="weui-uploader">
                            <view class="weui-uploader__hd" style="padding-bottom: 0px">
                              <view class="weui-uploader__title">{{item.label}}</view>
                              <view class="weui-uploader__info" wx:if="{{item.max > 0}}">{{values[item.name].length || 0}}/{{item.max}}</view>
                            </view>
                            <view class="weui-uploader__bd" style="padding-top: 10px">
                              <view class="weui-uploader__files" id="uploaderFiles">
                                <repeat for="{{values[item.name]}}" key="*this" item="file" index="index">
                                  <view class="weui-uploader__file" wx:if="{{item.type === 'image'}}" bindtap="previewImage"
                                        id="{{file}}" data-key="{{item.name}}" style="position:relative;">
                                    <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                           mode="aspectFill" data-key="{{item.name}}"/>
                                    <view style="position: absolute;top: -.4em;right: -.4em;" @tap.stop="clearImage" data-key="{{item.name}}">
                                      <view class="slds-icon-action-close" style="width: 4px;height: 4px" data-index="{{index}}" data-key="{{item.name}}"></view>
                                    </view>
                                  </view>
                                  <view class="weui-uploader__file" wx:elif="{{item.type === 'video'}}" bindtap="previewImage"
                                        id="{{file}}">
                                    <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                           mode="aspectFill"/>
                                  </view>
                                  <view class="weui-uploader__file" wx:elif="{{item.type === 'audio'}}" bindtap="previewImage"
                                        id="{{file}}">
                                    <image class="weui-uploader__img" src="{{util.formatImageUrl(file, baseUrl)}}"
                                           mode="aspectFill"/>
                                  </view>
                                </repeat>
                              </view>
                              <view class="weui-uploader__input-box" wx:if="{{!item.max || values[item.name].length < item.max}}">
                                <view class="weui-uploader__input" bindtap="chooseFile({{item}})" ></view>
                              </view>
                            </view>
                          </view>
                        </view>
                        <!--<view class="weui-cell__ft weui-cell__ft_in-access" wx:if="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}"></view>-->
                      </view>
                    </block>
                  </block>
                  <block wx:else>
                    <block wx:if="{{!item._top}}">

                      <block wx:if="{{item.type === 'image'}}">
                        <block wx:if="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}">
                          <view class='weui-cell weui-cell_access' data-value="{{values[item.name]}}" bindtap="chooseFile({{item}})">
                            <view class="weui-cell__required" wx:if="{{util.isRequired(args.action, item)}}"></view>
                            <view class="weui-cell__hd" >
                              <view class="weui-label">{{item.label}}</view>
                            </view>
                            <view class="weui-cell__bd" style="text-align:right;">
                              <block wx:if="{{values[item.name]}}">
                                <image mode="aspectFill" src="{{util.formatImageUrl(values[item.name], baseUrl)}}" class="weui-uploader__img" style="display:block;float:right"
                                       id="{{values[item.name]}}" data-key="{{item.name}}"/>
                              </block>
                              <block wx:else>
                                <view class="weui-cell__ft weui-uploader__input-box" style="display:block;float:right" >
                                  <view class="weui-uploader__input"></view>
                                </view>
                              </block>
                            </view>
                          </view>
                        </block>
                        <block wx:else>
                          <view class='weui-cell weui-cell_access' data-value="{{values[item.name]}}" bindtap="previewImage" data-key="{{item.name}}">
                            <view class="weui-cell__required" wx:if="{{util.isRequired(args.action, item)}}"></view>
                            <view class="weui-cell__hd" >
                              <view class="weui-label">{{item.label}}</view>
                            </view>
                            <view class="weui-cell__bd" style="text-align:right;">
                              <block wx:if="{{values[item.name]}}">
                                <image mode="aspectFill" src="{{util.formatImageUrl(values[item.name], baseUrl)}}" class="weui-uploader__img" style="display:block;float:right"
                                       id="{{values[item.name]}}" data-key="{{item.name}}"/>
                              </block>
                            </view>
                          </view>
                        </block>

                      </block>
                      <block wx:else>
                        <view class='weui-cell weui-cell_access' data-value="{{values[item.name]}}" data-edit="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}" @tap.stop="navigateTo({{item}})">
                          <view class="weui-cell__required" wx:if="{{util.isRequired(args.action, item)}}"></view>
                          <view class="weui-cell__hd" >
                            <view class="weui-label">{{item.label}}</view>
                          </view>
                          <view class="weui-cell__bd" style="text-align:right;">
                            <block wx:if="{{values[item.name]}}">
                              <image mode="aspectFill" src="{{util.formatImageUrl(values[item.name], baseUrl)}}" class="weui-uploader__img" style="display:block;float:right" wx:if="{{item.type === 'image' && values[item.name]}}" bindtap="chooseFile({{item}})"
                                     id="{{values[item.name]}}" data-key="{{item.name}}"/>
                              <video src="{{util.formatVideoUrl(values[item.name], baseUrl)}}" class="weui-uploader__img" style="display:block;float:right" wx:if="{{item.type === 'video' && values[item.name]}}">{{values[item.name]}}</video>
                            </block>
                            <block wx:else>
                              <view class="weui-cell__ft weui-uploader__input-box" style="display:block;float:right" wx:if="{{item.type === 'image'}}">
                                <view class="weui-uploader__input" bindtap="chooseFile({{item}})" ></view>
                              </view>
                            </block>
                          </view>
                          <view class="weui-cell__ft weui-cell__ft_in-access" wx:if="{{!(item.readonly || !_record_allowEdit || args.action === 'read') && item.type === 'video'}}"></view>
                        </view>
                      </block>
                    </block>
                    <block wx:else>
                      <view class="weui-cell weui-cell_image">
                        <image class="cover" mode="aspectFill" wx:if="{{values[item.name]}}" src="{{util.formatImageUrl(values[item.name], baseUrl)}}" bindtap="previewImage"
                               id="{{values[item.name]}}" data-key="{{item.name}}"/>
                      </view>
                    </block>
                  </block>
                </block>
                <block wx:elif="{{item.type === 'boolean'}}">
                  <view class="weui-cell weui-cell_switch" hover-class='weui-grid_active'>
                    <view class="weui-cell__bd">{{item.label}}</view>
                    <view class="weui-cell__ft" data-id="{{item.name}}" >
                      <switch checked="{{values[item.name] || false}}" data-id="{{item.name}}" bindchange="textChange" disabled="{{(item.readonly || !_record_allowEdit || args.action === 'read')}}"/>
                    </view>
                  </view>
                </block>
                <block wx:elif="{{item.type === 'text' && item.is_wide}}">
                  <block wx:if="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}">
                    <view class="weui-cell">
                      <view class="weui-cell__required" wx:if="{{util.isRequired(args.action, item)}}"></view>
                      <view class="weui-cell__bd">
                        <textarea class="weui-textarea-input" data-id="{{item.name}}" name="{{item.name}}" placeholder="{{item.label}}" value="{{util.transformFieldValue(item, values[item.name])}}" auto-height="true" bindinput="textChange"/>
                      </view>
                    </view>
                  </block>
                  <block wx:else>
                    <view class="weui-cell">
                      <view class="weui-cell__bd">{{item.label}}</view>
                      <view class="weui-cell__bd">
                        <view class="weui-cell__ft">{{util.transformFieldValue(item, values[item.name]) || item.label}}</view>
                      </view>
                    </view>
                  </block>
                </block>
                <block wx:elif="{{item.type === 'textarea' && (item.readonly || !_record_allowEdit || args.action === 'read')}}">
                  <view class="weui-media-box weui-media-box_text">
                    <view class="weui-media-box__title weui-media-box__title_in-text">
                      {{item.label}}
                    </view>
                    <view class="weui-media-box__desc">
                      <text space="emsp">{{util.transformFieldValue(item, values[item.name])}}</text>
                    </view>
                  </view>
                </block>
                <block wx:else>
                  <view class='weui-cell weui-cell_access field-textarea' hover-class='weui-grid_active' data-value="{{values[item.name]}}" data-edit="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}" @tap.stop="navigateTo({{item}})">
                    <block wx:if="{{item.type === 'textarea'}}">
                      <block wx:if="{{item.is_wide}}">
                        <view class="weui-cell__bd">
                          <block wx:if="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}">
                            <textarea style="min-height: {{(item.rows || 3) * 1.4}}em" class="weui-textarea" name="{{item.name}}" data-id="{{item.name}}" placeholder="{{util.showRequired(args.action, item, values[item.name]) ? item.label + '（必填）' :item.label}}" value="{{util.transformFieldValue(item, values[item.name])}}" auto-height="true" bindinput="textChange" maxlength="-1"/>
                          </block>
                          <block wx:else>
                            <view class="weui-cell__ft wide-cell">{{util.transformFieldValue(item, values[item.name]) || item.label}}</view>
                          </block>
                        </view>
                      </block>
                      <block wx:else>
                        <view class="weui-cell__required" wx:if="{{util.isRequired(args.action, item)}}"></view>
                        <view class="weui-cell__hd" wx:if="{{!values[item.name]}}">
                          <view class="weui-label">{{item.label}}</view>
                        </view>
                        <view class="weui-cell__bd">
                          <view class="weui-cell__ft wide-cell" wx:if="{{!util.showRequired(args.action, item, values[item.name])}}">{{util.transformFieldValue(item, values[item.name])}}</view>
                        </view>
                        <block wx:if="{{!(item.readonly || !_record_allowEdit || args.action === 'read')}}">
                          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
                        </block>
                      </block>
                    </block>
                    <block wx:else>
                      <view class="weui-cell__required" wx:if="{{util.isRequired(args.action, item)}}"></view>
                      <view class="weui-cell__hd">
                        <view class="weui-label">{{item.label}}</view>
                      </view>
                      <view class="weui-cell__bd">
                        <block wx:if="{{item.type === 'phone' && (item.readonly || !_record_allowEdit || args.action === 'read')}}">
                          <view class="weui-cell__ft" @tap="phoneCall(values[item.name])">{{values[item.name]}}</view>
                        </block>
                        <block wx:else>
                          <view class="weui-cell__ft" wx:if="{{!util.showRequired(args.action, item, values[item.name])}}">{{util.transformFieldValue(item, values[item.name])}}</view>
                        </block>
                      </view>
                      <block wx:if="{{!(item.readonly || !_record_allowEdit || args.action === 'read') || item.type === 'location'}}">
                        <view wx:if="{{item.type === 'location'}}" class="weui-cell__ft utility-location slds-icon slds-icon--small" style="line-height: 1.5;"></view>
                        <view wx:else class="weui-cell__ft weui-cell__ft_in-access"></view>
                      </block>
                    </block>
                  </view>
                </block>
              </block>
            </repeat>
          </view>
          <view class="weui-cells__tips" wx:if="{{groupField._helpText}}">{{groupField._helpText}}</view>
        </repeat>

        <view class="btn-container" wx:if="!hiddenBtn">
          <button class="submit-btn save-btn" type="primary" form-type="submit" disabled="{{submitDisabled}}" wx:if="{{args.action === 'edit' || args.action === 'create'}}">保存</button>
          <!--<button class="submit-btn remove-btn" wx:if="{{!args.undeletable && _record_allowDelte}}"  @tap="removeRecord">删除</button>-->
          <button class="submit-btn" type="primary" @tap="goEdit" wx:if="{{_record_allowEdit && args.action === 'read'}}">编辑</button>
          <button class="submit-btn remove-btn" wx:if="{{!args.undeletable && _record_allowDelte}}"  @tap="removeRecord">删除</button>
        </view>
      </view>
    </form>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import { baseUrl, appId } from '@/config'
  import util from '../wxs/util.wxs'
  const utilJs = require('../utils/util.js');
	import pageRouter from '@/utils/pageRouter'

  import _ from 'underscore'

  export default class Form extends wepy.component {

    props = {
      args: {
        type: Object
      }
    };

    wxs = {
      util: util,
    };

    data = {
      _record_name: '',
      _record_allowEdit: false,
      _record_allowDelte: false,
      showTopTips: false,
      baseUrl: baseUrl,
      message: '',
      schema: {},
      values: {},
      pickerIndex: {},
      hiddenButton: {},
      fieldOptions: {},
      fields: {},
      showOpenSetting: false,
      is_loaded: false,
      groupFields: [],
      submitDisabled: false,
      hiddenBtn: false,
      _changeValue: {}
    };

    /*
    * 根据字段的group、inlineHelpText属性，对字段进行分组
    * 注意：只读时，只显示有值的字段
    * */
    getGroupFields(fields, action, values){

      let fields_new = [];

      //将第一个多媒体类型字段放到第一个字段
      let foo = true; //false
      _.forEach(fields, function (field, key) {
        if(!field){
          throw new Error('无效的字段: ' + key)
        }

        field._key = key;

        field._top = false;

        if(action === 'read'){
          if(field.type === 'image' && !_.isEmpty(values[key]) && !foo){

            field.inlineHelpText = '  ';
            field.group = '';
            field._top = true;
            fields_new.unshift(field);
            foo = true;
          }else{
            fields_new.push(field)
          }
        }else{
          fields_new.push(field)
        }
      });

      let groupFields = [];
      let groupItem = {fields: {}, _groupText:'-', _helpText:'', _cellsClass: ''};
      _.forEach(fields_new, function (field) {
        let key = field._key;
        if(!field.hidden && !field.omit && (action != 'read' || !_.isEmpty(values[key]))){
          if(field.group){
            if(!_.isEmpty(groupItem.fields)){
              groupFields.push(groupItem);
              groupItem = {fields: {}, _groupText:'', _helpText:'', _cellsClass: ''};
            }
            groupItem.fields[key] = field;
            groupItem._groupText = field.group;
            groupItem._cellsClass = 'weui-cells_after-title';
            groupItem._helpText = field.inlineHelpText || '';

          }else if(field.inlineHelpText){
            groupItem.fields[key] = field;
            groupItem._helpText = field.inlineHelpText;
            groupFields.push(groupItem);
            groupItem = {fields: {}, _groupText:'', _helpText:'', _cellsClass: ''};
          }
          else{
            groupItem.fields[key] = field
          }
        }
      });

      if(!_.isEmpty(groupItem.fields)){
        groupFields.push(groupItem);
      }

      return groupFields
    }

    watch = {
      args: async function (newValue, oldValue) {
        if (!_.isEmpty(newValue)) {
          const object_name = newValue.object_name;
          const record_id = newValue.record_id;
          const action = newValue.action;
          let title = newValue.title;

          let defaultValues = newValue.defaultValues || {}

          this.hiddenBtn = newValue.hidden_btn || false;

          if (object_name) {
            const object = JSON.parse(JSON.stringify(await this.$parent.$parent.getObject(object_name, this.args.space_id)));
            object.allowEdit = true;
            this.schema = object;

            if(!title){
              title = object.label;
              if (object_name === 'spaces') {
                title = '商户';
              }
              if (action === 'create') {
                title = '新增' + title;
              } else if (action === 'edit') {
                title = '编辑' + title;
              }
            }

            if (object_name === 'users') {
              this.args.undeletable = true;
            }

            this.$apply();

            if (object.fields) {
              const fields = object.fields;
              let thisFields = {}
              for (let field_name in fields) {
                let field = fields[field_name];
                if(field.omit && (action === 'create' || action === 'edit')){
                  continue;
                }
                if(!field.label){
                  field.label = field_name
                }
                if (field.reference_to) {
                  if(_.isArray(field.reference_to)){
                    field.referenceToIsArray = true
                  }

                  field.options = await this.getReferenceTo(field.name, field.reference_to)
                }

                thisFields[field_name] = field

//                if(field.defaultValues){
//                  defaultValues[field_name] = field.defaultValue
//                }
              }
              this.fields = thisFields;
            }

            if (this.args.fields) {
              let fields = {};
              _.forEach(this.args.fields.split(','), function (field_name) {
                fields[field_name] = object.fields[field_name]
              })
              this.fields = fields
            }
          }

          if(action === 'create'){
            this._record_allowEdit = true;
            this.values = _.clone(defaultValues);

            _.forEach(this.fields, (f)=>{
              if(!f.readonly && !f.omit && _.has(f, 'defaultValue') && !_.has(this.values, f.name)){
                this.values[f.name] = f.defaultValue
              }
            })
          }

          if (object_name && record_id && action != 'create') {
            var keys = ['owner'];
            _.forEach(this.fields, (v, k)=> {
              if (!v.hidden && !v.omit && k.indexOf('.') < 0) {
                keys.push(k)
              }
            });
            let query_options = {
              $select: keys.join(","),
              $filter: `_id eq '${record_id}'`
            }
            let expand = []
            _.forEach(this.fields, (field) => {
              if ((field.type === 'lookup' || field.type === 'master_detail') && field.reference_to) {
                expand.push(`${field.name}($select=name)`)
              }
            });
            if (expand.length > 0) {
              query_options.$expand = expand.join(',')
            }
            const result = await this.$parent.$parent.query(object_name, query_options, this.args.space_id);
            if (result.value.length === 1) {
              this.values = result.value[0]
              delete this.values["@odata.id"]
              delete this.values["@odata.etag"]
              delete this.values["@odata.editLink"]
              delete this.values["_id"]
            }
            this._record_allowEdit = this.$parent.$parent.recordAllowEdit(object_name, this.values.owner, this.args.space_id);
            this._record_allowDelte = this.$parent.$parent.recordAllowDelete(object_name, this.values.owner, this.args.space_id);
          }
          for (let k in this.fields) {
            let field = this.fields[k];
            let fv = this.values[field.name];
            if (fv) {

              if (field.name === 'name' || field.is_name){
                this._record_name = fv
              }

              if (field.type === 'select') {
                if(field.multiple){
                  if (_.isArray(fv)) {
                    _.forEach(field.options, (option) => {
                      if (fv.includes(option.value)) {
                        option.checked = true
                      }
                    })
                  }
                }else{
                  _.forEach(field.options, (option) => {
                    if (fv === option.value) {
                      option.checked = true
                    }
                  })
                }
              }else if(field.type === 'lookup' || field.type === 'master_detail'){
                if(field.multiple){
                  let _ids = _.pluck(fv, '_id')
                  _.forEach(field.options, (option) => {
                    if (_ids.includes(option.value)) {
                      option.checked = true
                    }
                  })
                }else{
                  _.forEach(field.options, (option) => {
                    if (fv._id === option.value) {
                      option.checked = true
                    }
                  })

                  if(field.referenceToIsArray){
                    let rto = fv["o"];
                    if(fv["reference_to.o"]){
                      rto = fv["reference_to.o"]
                    }

                    fv.object_label = (await this.$parent.$parent.getObject(rto, this.args.space_id)).label;
                    this.values[field.name] = fv
                  }

                }
              }else if(field.type === 'datetime'){
                this.values[field.name] = utilJs.formatTime(new Date(fv), '-', true)
              }
            }
          }

          this.$apply();

          if(action === 'read'){
            title = this._record_name
          }

          const pages = getCurrentPages();
          const page = pages[pages.length - 1];
          page.changeNavigationBarTitleText(title);

          this.groupFields = this.getGroupFields(this.fields, action, this.values);
          console.log('this.groupFields', this.groupFields);
        }
        this.is_loaded = true
        this.$apply()
        wepy.hideLoading();
      }
    };

    async onLoad() {
      wepy.showLoading({
        title: '加载中',
        mask: true
      });
      const setting = await wepy.getSetting()
      if(setting.authSetting["scope.userLocation"] === false){
        this.showOpenSetting = true;
      }
      this.$apply()
    }

    changeValue(key, value) {
      this.values[key] = value;
      this._changeValue[key] = value;
      this.$apply();
    }

    getObjectField(key) {
      return this.fields[key]
    }

    isTempFile(filePath){
      return (new RegExp(":\/\/")).test(filePath)
    }

    async uploadVideo(filePath, field_name, record_id){
      const authToken = this.$parent.$parent.globalData.user.auth_token;
      const userId = this.$parent.$parent.globalData.user._id;
      const fileResult = await wepy.uploadFile({
        url: `${baseUrl}/s3/videos`,
        filePath: filePath,
        name: 'file',
        header: {
          'X-Auth-Token': authToken,
          'X-User-Id': userId
        }
      }).catch((err)=>{
        console.log("uploadVideo error...",err)
      });
      const fileData = JSON.parse(fileResult.data);
      if (fileData.errors || fileResult.statusCode != 200) {
        wx.showToast({
          title: "视频上传失败，请稍后再试",
          icon: "none"
        });
        return false;
      }else{
        return fileData
      }
    }

    async uploadVideos(record_id){
      const fields = this.fields;
      for (let k in fields) {
        let f = fields[k]
        if(f.type === 'video'){
          let fv = this.values[k];
          if(fv){
            if(this.isTempFile(fv)){
              const video = await this.uploadVideo(fv, k, record_id);
              if(video){
                this.values[k] = video._id;
              }
            }
          }
        }
      }
    }

    async uploadImage(filePath, field_name, record_id){
      const imageInfo = await wepy.getImageInfo({
        src: filePath
      });
      let formData = {
        width: imageInfo.width,
        height: imageInfo.height,
        type: imageInfo.type,
        orientation: imageInfo.orientation,
        object_name: this.args.object_name,
        field_name: field_name,
        record_id: record_id
      };
      const authToken = this.$parent.$parent.globalData.user.auth_token;
      const userId = this.$parent.$parent.globalData.user._id;
      const fileResult = await wepy.uploadFile({
        url: `${baseUrl}/s3/images`,
        filePath: filePath,
        name: 'file',
        formData: formData,
        header: {
          'X-Auth-Token': authToken,
          'X-User-Id': userId
        }
      }).catch((err)=>{
        console.log("error...",err)
      });
      const fileData = JSON.parse(fileResult.data);
      if (fileData.errors || fileResult.statusCode != 200) {
        wx.showToast({
          title: "图片上传失败，请稍后再试",
          icon: "none"
        });
        return false;
      }else{
        return fileData
      }
    }

    async uploadImages(record_id) {
      const fields = this.fields;
      for (let k in fields) {
        let f = fields[k]
        if(f.type === 'image'){
          if(f.multiple){
            let fv = this.values[k];
            if(_.isArray(fv)){
              let new_fv = []
              for (let v of fv){
                if(this.isTempFile(v)){
                  const image = await this.uploadImage(v, k, record_id);
                  if(image){
                    new_fv.push(image._id)
                  }
                }else{
                  new_fv.push(v)
                }
              }
              this.values[k] = new_fv
            }
          }else{
            let fv = this.values[k];
            if(fv){
              if(this.isTempFile(fv)){
                const image = await this.uploadImage(fv, k, record_id);
                if(image){
                  this.values[k] = image._id
                }
              }
            }
          }
        }
      }
    }

    hasTempVideo(){
      const fields = this.fields
      for (let k in fields) {
        let f = fields[k]
        if (f.type === 'video') {
          let fv = this.values[k]
          if (fv) {
            if (this.isTempFile(fv)) {
              return true
            }
          }
        }
      }
    }

    hasTempImages(){
      const fields = this.fields;
      for (let k in fields) {
        let f = fields[k]
        if(f.type === 'image'){
          if(f.multiple){
            let fv = this.values[k];
            if(_.isArray(fv)){
              for (let v of fv){
                if(this.isTempFile(v)){
                  return true
                }
              }
            }
          }else{
            let fv = this.values[k];
            if(fv){
              if(this.isTempFile(fv)){
                return true
              }
            }
          }
        }
      }
    }

    transformValue(formValues) {
      const value = _.clone(this.values)
      const fields = this.fields;
      if(value){
        delete value.owner
      }
      _.forEach(value, (v, k) => {
        let field = fields[k];
        if(!field){
          throw new Error('无效的key', k)
        }
        if (field.type === 'lookup' || field.type === 'master_detail') {
          if (field.multiple && _.isArray(v)){
            value[k] = _.compact(_.pluck(v, '_id'));
          }else if (_.isObject(v)) {
            value[k] = v._id
          }

          if(_.isArray(field.reference_to)){
            if(v._id){
              value[k] = {o: v.object_name || v['reference_to.o'], ids: [v._id]}
            }else{
              value[k] = {o: v.object_name || v.o}
            }
          }
        }

        if(field.type === 'datetime'){
          if(value[k]){
            value[k] = (new Date(value[k].replace(/-/g,"/"))).toISOString()
          }
        }
      });

      _.forEach(formValues, (v, k) =>{
        value[k] = v;
      });
      return value
    }

    async getReferenceTo(file_name, reference_to) {

      if(_.isArray(reference_to)){
        return []
      }

      let query = {
        $select: 'name'
      };
      if (reference_to === 'users' || reference_to === 'space_users') {
        reference_to = 'space_users'
        query.$select = 'name,user'
      }

      const data = await this.$parent.$parent.query(reference_to, query, this.args.space_id)
      let options = []
      data.value.forEach(function (record) {
        if (reference_to === 'space_users') {
          options.push({label: record.name, value: record.user});
        } else {
          options.push({label: record.name, value: record._id});
        }
      });
      return options
    }

    checkRequired() {
      const fields = this.fields
      for (let field_name in fields) {
        let field = fields[field_name]
        if (field.required) {
          if (!this.values[field.name]  || (field.multiple && _.isEmpty(this.values[field.name]))) {
            this.showTopTips = true
            this.message = `请设置${field.label}`;
            return false
          }
        }
      }
      return true
    }

    goBack(action, record_id) {
      const pages = getCurrentPages();
      const prevPage = pages[pages.length - 2];
      if (prevPage.refresh) {
        prevPage.refresh(action, record_id)
      }
      if(pageRouter.callBack && typeof pageRouter.callBack == "function"){
        pageRouter.callBack();
        pageRouter.callBack = null;
      }
      else{
        wepy.navigateBack({
          delta: 1
        })
      }
    }

    events = {
      async record_save(){
        if(this.args.action === 'edit' && !_.isEmpty(this._changeValue)){
          if (!this.checkRequired()) {
            return;
          }
          wx.showLoading({
            title: '正在保存',
            mask: true
          });
          console.log('record_save.....')
          await this.uploadImages(this.args.record_id);
          await this.uploadVideos(this.args.record_id);
          const value = this.transformValue();
          await this.$parent.$parent.update(this.args.object_name, this.args.record_id, value, this.args.space_id);
          const pages = getCurrentPages();
          const prevPage = pages[pages.length - 1];
          if (prevPage.refresh) {
            prevPage.refresh('edit')
          }
          wx.hideLoading()
        }
      }
    };

    methods = {
      openSetting(e){
        self = this;
        if(e.detail.authSetting["scope.userLocation"]){
          this.showOpenSetting = false;
          self.$apply();
          self.methods.getAddress.call(self, e);
        }
      },
      getAddress(e) {
        console.log(e);
        self = this;
        const key = e.target.dataset.id;
        wepy
          .chooseLocation()
          .then(res => {
            if (!self.values[key]) {
              self.values[key] = {}
            }
            self.values[key].address = res.address;
            self.values[key].latitude = res.latitude;
            self.values[key].longitude = res.longitude;
            self.$apply();
          })
          .catch(err => {
            console.log(err)
            if (err.errMsg == 'chooseLocation:fail auth deny') {
              self.showOpenSetting = true
              self.$apply()
            }
          });
      },
      textChange(e) {
        const key = e.target.dataset.id;
        this.values[key] = e.detail.value;
        this._changeValue[key] = e.detail.value;
        this.$apply()
      },
      selectChange(e) {
        const index = e.detail.value;
        const key = e.target.dataset.id
        this.pickerIndex[key] = index
        const value = this.fields[key].options[index].value
        this.values[key] = value
        this.$apply()
      },
      optionChange(e) {
        const index = e.detail.value;
        const key = e.target.dataset.id;
        this.pickerIndex[key] = index;
        const value = this.fieldOptions[key][index].value;
        this.values[key] = value;
        this.$apply()
      },
      checkboxChange: function (e) {
        const values = e.detail.value, key = e.target.dataset.id;
        let checkboxItems = _.clone(this.fields[key].options);
        for (let i = 0, lenI = checkboxItems.length; i < lenI; ++i) {
          checkboxItems[i].checked = false;

          for (let j = 0, lenJ = values.length; j < lenJ; ++j) {
            if (checkboxItems[i].value == values[j]) {
              checkboxItems[i].checked = true;
              break;
            }
          }
        }

        this.values[key] = values;
        this.$apply()
      },
      bindDateChange(e) {
        const key = e.target.dataset.id
        const date = e.detail.value

      },
      bindTimeChange(e) {
        const key = e.target.dataset.id
        const time = e.detail.value
      },
      async chooseFile(e) {
        const that = this;
        const key = e._key;
        const multiple = e.multiple || false
        const type = e.type;
        if (type === 'image') {
          let options = {
            sizeType: ['original', 'compressed'],
            sourceType: ['album', 'camera'],
          }
          if (!multiple) {
            options.count = 1
          }
          const res = await wepy.chooseImage(options)

          if(multiple){
            if (!that.values[key]) {
              that.values[key] = []
            }
            that.values[key] = that.values[key].concat(res.tempFilePaths)
          }else{
            if (!that.values[key]) {
              that.values[key] = ''
            }
            that.values[key] = res.tempFilePaths.length > 0 ? res.tempFilePaths[0] : ''
          }

          if (!multiple) {
            that.hiddenButton[key] = true
          }

          that.$apply()

        } else if (type === 'video') {
          const res = await wepy.chooseVideo({
            sourceType: ['album','camera'],
            maxDuration: 60,
            camera: 'back'
          });

          that.values[key] = utilJs.formatVideoUrl(res.tempFilePath, this.baseUrl)

          if (!multiple) {
            that.hiddenButton[key] = true
          }
          that.$apply()
        }
      },
      previewImage: function (e) {
        const key = e.currentTarget.dataset.key;
        let urls = [];

        let fValue = this.values[key];
        console.log('previewImage', key, fValue)
        if(_.isArray(fValue)){
          this.values[key].forEach(function (f) {
            urls.push(utilJs.formatImageUrl(f, baseUrl))
          });
        }else{
          urls.push(utilJs.formatImageUrl(fValue, baseUrl))
        }


        wx.previewImage({
          current: utilJs.formatImageUrl(e.currentTarget.id, baseUrl), // 当前显示图片的http链接
          urls: urls // 需要预览的图片http链接列表
        })
      },
      clearImage: function (e) {
        const key = e.currentTarget.dataset.key;
        this.values[key].splice(e.target.dataset.index,1);
        this.$apply();
      },
      async removeRecord() {

        if (this.args.undeletable) {
          return;
        }
        const result = await wepy.showModal({
          title: '确认删除',
          confirmText: "确定",
          content: "您确认要删除此记录吗？",
          cancelText: "取消",
        });
        if (result.confirm) {
          await this.$parent.$parent.delete(this.args.object_name, this.args.record_id, this.args.space_id)
          this.goBack("remove");
        }
      },
      async submitForm(e) {

        const formValues = e.detail.value;

        this.submitDisabled = true;
        if (!this.checkRequired()) {
          this.submitDisabled = false;
          return;
        }

        wx.showLoading({
          title: '正在保存',
          mask: true
        });

        let record_id;

        if (this.args.action === 'create') {
          const value = this.transformValue(formValues);
          if(Object.keys(this.fields).indexOf('wx_form_id') > -1){
            value['wx_form_id'] = appId + ':'+ e.detail.formId
          }
          const record = await this.$parent.$parent.insert(this.args.object_name, value, this.args.space_id)
          record_id = record.value[0]._id;
          if (this.hasTempImages()) {
            await this.uploadImages(record_id);
            const value = this.transformValue(formValues);
            await this.$parent.$parent.update(this.args.object_name, record_id, value, this.args.space_id)
          }

          if (this.hasTempVideo()) {
            await this.uploadVideos(record_id);
            const value = this.transformValue(formValues);
            await this.$parent.$parent.update(this.args.object_name, record_id, value, this.args.space_id)
          }

        } else if (this.args.action === 'edit') {
          record_id = this.args.record_id;
          //检查临时附件，如果有，则上传附件
          await this.uploadImages(record_id);
          await this.uploadVideos(record_id);
          const value = this.transformValue(formValues);
          if(Object.keys(this.fields).indexOf('wx_form_id') > -1){
            value['wx_form_id'] = appId + ':'+ e.detail.formId
          }
          await this.$parent.$parent.update(this.args.object_name, record_id, value, this.args.space_id)
        }

        this._changeValue = {}

        this.goBack(this.args.action, record_id);
      },
      navigateTo(field, e){

        const dataset = e.currentTarget.dataset;

        if(field.type === 'location' && !dataset.edit){
          if(dataset.value){
            wepy.openLocation({
              latitude: dataset.value.latitude,
              longitude: dataset.value.longitude,
              address: dataset.value.address,
              name: this._record_name || ''
            })
          }
        }

        if(!dataset.edit){
          return ;
        }

        if((field.type === 'text' || field.type === 'textarea' ) && field.is_wide){
          return;
        }

        let url = '';
        switch(field.type){
          case 'text':
            url = '/pages/edit/text';
            break;
          case 'phone':
            url = '/pages/edit/text';
            break;
          case 'textarea':
            url = '/pages/edit/textarea';
            break;
          case 'date':
            url = '/pages/edit/date';
            break;
          case 'datetime':
            url = '/pages/edit/datetime';
            break;
          case 'markdown':
            url = '/pages/edit/textarea';
            break;
          case 'lookup':
            if(this.args.create_child){
              url = '/pages/edit/lookup_child';
            }else{
              url = '/pages/edit/lookup';
            }
            break;
          case 'master_detail':
            url = '/pages/edit/lookup';
            break;
          case 'select':
            url = '/pages/edit/select';
            break;
//          case 'image':
//            url = '/pages/edit/image';
//            break;
          case 'number':
            url = '/pages/edit/number';
            break;
          case 'currency':
            url = '/pages/edit/number';
            break;
          case 'location':
            url = '/pages/edit/location';
            break;
          case 'video':
            url = '/pages/edit/video';
            break;
        }

        if(!url){
          return ;
        }
        //给url上添加参数
        let value = dataset.value || ''
        if (value.constructor === Object) {
          value = JSON.stringify(dataset.value)
        }
        url = `${url}?space_id=${this.args.space_id}&key=${field.name}&title=${field.label}&value=${value}`;
        if(field.multiple){
          url = `${url}&multiple=${field.multiple}`
        }

        if(field.type === 'textarea' && field.rows){
          url = `${url}&rows=${field.rows}`
        }

        if(field.type === 'number' && field.scale > 0){
          url = `${url}&scale=${field.scale}`
        }

        wepy.navigateTo({url: url});
      },
      phoneCall(number) {
        wepy.makePhoneCall({
          phoneNumber: number
        });
      },
      goEdit(){
        let url_args = ''
        for(let i in this.args){
          if(i == 'action'){
            url_args += `${i}=edit&`
          }else{
            url_args += `${i}=${this.args[i]}&`
          }
        }
        console.log('url', {url: '/pages/record/edit?' + url_args});
        wepy.navigateTo({url: '/pages/record/edit?' + url_args});
      }
    }
  }
</script>
