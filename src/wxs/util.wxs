// 活动状态国际化
function formatEventStatus(status) {
  var reValue = '已查看';
  switch (status) {
    case 'accepted':
      reValue = '已接受';
      break;
    case 'pending':
      reValue = '观望中';
      break;
    case 'rejected':
      reValue = '已拒绝';
      break;
  }
  return reValue;
}

// 日期格式化
function formatDate(value, joiner, type) {
  if (!value) {
    return '';
  }
  if (typeof value == "string") {
    value = getDate(value);
  }
  var year = value.getFullYear() + (joiner || '年');
  var month = (value.getMonth() + 1) + (joiner || '月');
  if (joiner) {
    var date = value.getDate() + ' ';
  } else {
    var date = value.getDate() + '日';
  }
  console.log('[date]', date)

  if(type === 'date'){
    return year + month + date
  }

  var hours = value.getHours();
  var minutes = value.getMinutes();

  var minutes_str = '';
  if (minutes < 10) {
    minutes_str = '0' + minutes;
  } else {
    minutes_str = minutes;
  }

  if (joiner) {
    return year + month + date + hours + ':' + minutes_str;
  }

  var hours_str = '';
  if (hours <= 12) {
    hours_str = '上午' + hours
  } else if (hours <= 18) {
    hours_str = '下午' + (hours - 12);
  } else {
    hours_str = '晚上' + (hours - 12);
  }
  return year + month + date + ' ' + hours_str + ':' + minutes_str;
}

// 日期格式化
function formatDateMini(value) {
  console.log('formatDateMini', value);
  var now = getDate()
  if (typeof value == "string") {
    value = getDate(value);
  }
  var year = value.getFullYear() + '年';
  var month = (value.getMonth() + 1) + '月';
  var date = value.getDate() + '日';

  var hours = value.getHours();
  var minutes = value.getMinutes();

  var minutes_str = '';
  if (minutes < 10) {
    minutes_str = '0' + minutes;
  } else {
    minutes_str = minutes;
  }

  var hours_str = '';
  if (hours <= 12) {
    hours_str = '上午' + hours
  } else if (hours <= 18) {
    hours_str = '下午' + (hours - 12);
  } else {
    hours_str = '晚上' + (hours - 12);
  }
  console.log('formatDateMini 77');
  if(value.getFullYear() === now.getFullYear() && (value.getMonth() < now.getMonth() || value.getDate() < now.getDate())){
    console.log('formatDateMini if');
    return month + date;
  }

  if(value.getFullYear() < now.getFullYear() || value.getMonth() < now.getMonth() || value.getDate() < now.getDate()){
    console.log('formatDateMini if2');
    return year + month + date;
  }else{
    console.log('formatDateMini else');
    return hours_str + ':' + minutes_str;
  }
}

function formatNumber(n) {
  n = n.toString();
  return n[1] ? n : '0' + n;
}

function formatWeek(day) {
  var reValue = '周';
  switch(day){
    case 0:
      reValue += '日';
      break;
    case 1:
      reValue += '一';
      break;
    case 2:
      reValue += '二';
      break;
    case 3:
      reValue += '三';
      break;
    case 4:
      reValue += '四';
      break;
    case 5:
      reValue += '五';
      break;
    case 6:
      reValue += '六';
      break;
  }
  return reValue;
}

// 开始结束时间格式化为一个字符串
function formatStartEnd(start, end, isAllDay) {
  if (!start){
    return '';
  }
  var reValue = '';
  if (typeof start == "string" && start) {
    start = getDate(start);
  }
  if (typeof end == "string" && end) {
    end = getDate(end);
  }

  var sYear = start.getFullYear();
  var sMonth = start.getMonth() + 1;
  var sDate = start.getDate();
  var sDay = start.getDay();
  var sHour = start.getHours();
  var sMinute = start.getMinutes();
  var isShowDay = true;
  var currentYear = getDate().getFullYear();
  var isShowYear = currentYear != sYear;

  reValue = [sYear, sMonth, sDate].map(formatNumber).join('/') + ' %@ ';
  if (!isAllDay){
    reValue += [sHour, sMinute].map(formatNumber).join(':');
  }

  if(end){
    var eYear = end.getFullYear();
    var eMonth = end.getMonth() + 1;
    var eDate = end.getDate();
    var eHour = end.getHours();
    var eMinute = end.getMinutes();

    var eDates = [];
    if (sYear != eYear){
      isShowYear = true;
      eDates.push(eYear);
    }
    if (sYear != eYear || sMonth != eMonth || sDate != eDate) {
      isShowDay = false;
      eDates.push(eMonth);
      eDates.push(eDate);
      reValue += ' - ';
    }
    else{
      if(!isAllDay){
        reValue += ' - ';
      }
    }
    var eTimes = [];
    eTimes.push(eHour);
    eTimes.push(eMinute);
    reValue += eDates.map(formatNumber).join('/') + ' ';
    if (!isAllDay){
      reValue += eTimes.map(formatNumber).join(':');
    }
  }
  if (!isShowYear){
    reValue = reValue.replace(getRegExp("^\d+\/"), '');
  }
  if (isShowDay){
    sDay = formatWeek(sDay);
  }
  else{
    sDay = '';
  }
  return reValue.replace('%@', sDay);
}

// 图片地址转换
function formatImageUrl(src, baseUrl) {
  if (getRegExp("^\w+:\/\/").test(src)) {
    // http:// 或 wxfile:// 等完整路径直接返回
    return src;
  }
  else if(src == "load_faild"){
    return "https://lg-769qcuso-1253849369.cos.ap-shanghai.myqcloud.com/faild.png";
  }
  else if(src){
    return baseUrl + "/api/files/images/" + src;
  }
  else{
    return "";
  }
}


// 头像地址转换
function formatAvatarImageUrl(src, baseUrl) {
  console.log("===src, baseUrl===",src, baseUrl)
  if (getRegExp("^\w+:\/\/").test(src)) {
    // http:// 或 wxfile:// 等完整路径直接返回
    return src;
  }
  else if(src && src != "load_faild"){
    return baseUrl + "/api/files/images/" + src;
  }
  else{
    return "https://lg-769qcuso-1253849369.cos.ap-shanghai.myqcloud.com/avatar.png";
  }
}

// 会员卡背景地址转换
function formatCardBgImageUrl(src, baseUrl) {
  if (getRegExp("^\w+:\/\/").test(src)) {
    // http:// 或 wxfile:// 等完整路径直接返回
    return src;
  }
  else if(src != "load_faild"){
    return baseUrl + "/api/files/images/" + src;
  }
  else{
    return null;
  }
}

// 视频地址转换
function formatVideoUrl(src, baseUrl) {
  if(src){
    if (getRegExp("^\w+:\/\/").test(src)){
      return src;
    }else {
      return baseUrl + "/api/files/videos/" + src;
    }
  }
  else{
    return "https://lg-769qcuso-1253849369.cos.ap-shanghai.myqcloud.com/empty.png";
  }
}

// 文章图片模板
function getEmptyImageUrl(type) {
  var url = "https://www-steedos-com.oss-cn-beijing.aliyuncs.com/apps/vip/covers/"
  switch (type) {
    case "announcements":
      return url = url + "announcements.jpg";
      break;
    case "about":
      return url = url + "about.jpg";
      break;
    case "news":
      return url = url + "news.jpg";
      break;
    case "course":
      return url = url + "course.jpg";
      break;
    case "help":
      return url = url + "help.jpg";
      break;
    case "jobs":
      return url = url + "jobs.jpg";
      break;
    default :
      return url = url + "news.jpg";
      break;
  }
  return url;
}

function showRequired(action, field, value) {
  if(action === 'edit' || action === 'create'){
    if(!value || value.length < 1){
      if(field.required){
        return true
      }
    }
  }
  return false
}

function isRequired(action, field) {
  if(action === 'edit' || action === 'create'){
    if(field.required){
      return true
    }
  }
  return false
}

function transformFieldValue(field, value){
  if(!value){
    return "";
  }

  if(field.type === 'select'){
    if(field.multiple){
      var val = [];
      field.options.forEach(function(_o){
        if (value.indexOf(_o.value) > -1) {
          val.push(_o.label)
        }
      })
      return val.join(",");
    }else{
      var val = '';
      field.options.forEach(function(_o){
        if (value === _o.value) {
          val = _o.label
        }
      })
      return val;
    }
  }else if(field.type === 'location'){
     return value.address
  }else if((field.type === 'lookup' || field.type === 'master_detail') && field.reference_to){
    if(field.multiple){
      var val = [];
      value.forEach(function(v){
        val.push(v.name);
      })
      return val.join(",");
    }else{
      console.log('util value2222', JSON.stringify(value))
      if(field.referenceToIsArray){
        if(value.name && value.object_label){
          return  value.name + '(' + value.object_label + ')'
        }

        if(value.object_label){
          return  value.object_label
        }
      }

      return value.name
    }
  }else if(field.type === 'datetime'){

    if(typeof value == "string"){
      var d0 = value.split(' ');

      var d1 = d0[0];

      var d2 = d0[1];

      var d1_1 = d1.split('-');

      var year = d1_1[0];
      var month = d1_1[1] - 1;
      var day = d1_1[2];

      var d2_1 = d2.split(':');

      value = getDate(year, month, day, d2_1[0], d2_1[1], 0, 0);

    }

    var year = value.getFullYear() + '年';
    var month = (value.getMonth() + 1) + '月';
    var date = value.getDate() + '日';

    var hours = value.getHours();
    var hours_str = '';
    if(hours <= 12){
      hours_str = '上午' + hours
    }else if(hours <= 18){
      hours_str = '下午' + (hours - 12);
    }else{
      hours_str = '晚上' + (hours - 12);
    }

    var minutes = value.getMinutes();

    if(minutes < 10){
      minutes = '0' + minutes;
    }

    return year + month + date + ' ' + hours_str + ':' + minutes
  }else if(field.type === 'date'){
    return formatDate(value, '', 'date')
  }
  return value
}

function includes(arr, item) {
  if(arr){
    return arr.indexOf(item) > -1
  }
  return false;
}

// fix数据

function fixed(num, length) {
  var num = num * 100;
  return num.toFixed(length);
}

function getUserAvatar(userId, baseUrl) {
  return baseUrl + '/avatar/' + userId
}

module.exports = {
  formatDate: formatDate,
  formatStartEnd: formatStartEnd,
  formatEventStatus: formatEventStatus,
  formatImageUrl: formatImageUrl,
  formatAvatarImageUrl: formatAvatarImageUrl,
  formatCardBgImageUrl: formatCardBgImageUrl,
  formatVideoUrl: formatVideoUrl,
  getEmptyImageUrl:getEmptyImageUrl,
  transformFieldValue: transformFieldValue,
  formatDateMini: formatDateMini,
  showRequired: showRequired,
  includes: includes,
  fixed: fixed,
  isRequired: isRequired,
  getUserAvatar: getUserAvatar
}
