<style>
  .loading-animation{
    background: red;
    background-image: url(https://image.flaticon.com/icons/svg/109/109586.svg);
    height:24px;
    width:24px;
    border-radius: 50%;
    background-repeat: no-repeat;
    margin-left: calc(50% - 12px);
  }
</style>

<template>
  <view class="creator-apps page">
    <!--<view class="page__hd">-->
      <!--<view class="page__title">应用程序</view>-->
      <!--&lt;!&ndash;<view class="page__desc">九宫格</view>&ndash;&gt;-->
    <!--</view>-->
    <view class="page__bd">
      <view class="weui-grids">
        <block wx:for="{{apps}}" wx:key="*this">
          <navigator url="app_objects?space_id={{space_id}}&app={{index}}" class="weui-grid" hover-class="weui-grid_active" wx:if="{{item.visible != false}}">
            <view class="weui-grid__icon">
              <view class="slds-icon-standard-{{item.icon_slds}} slds-icon slds-icon--small slds-m-right--x-small"/>
            </view>
            <view class="weui-grid__label">{{item.label || item.name}}</view>
          </navigator>
        </block>
      </view>
    </view>
  </view>
  <!--<view animation="{{animationData}}" class="loading-animation" >-->
  <!--</view>-->
</template>

<script>
  import wepy from 'wepy';
  import req from '@/network'
  import creatorClient from '@/utils/creator_client.js'

  export default class creatorApps extends wepy.page {
    config = {
      navigationBarTitleText: '应用程序'
    };

//    async onLoad(e) {
//      await this.$parent.login();
//      this.space_id = this.$parent.space._id;
//      this.$parent.bootstrap = await creatorClient.loadBootstrap(this.space_id);
//      this.apps = this.$parent.bootstrap.apps;
//      this.$apply()
//    }

    onShow(){
      this.space_id = this.$parent.space._id;
      this.apps = this.$parent.bootstrap.apps;
      this.$apply()

//      var animation = wx.createAnimation({
//        duration: 80,
//        timingFunction: 'linear',
//      })
//
//      this.animation = animation
//
//      animation.scale(2,2).rotate(this.s).step()
//
//      this.animationData = animation.export()
//
//      let i = 1;
//
//      setInterval(function() {
//        this.s = this.s - 2*i;
//        if(i < 45){
//          i++;
//        }
//        animation.rotate(this.s).step()
//        this.animationData = animation.export()
//        this.$apply()
//
//
//      }.bind(this), 80)


    }

    data = {
      s: 45,
      apps: [],
      space_id: '',
      animationData: {}
    };

    methods = {};
  }
</script>
