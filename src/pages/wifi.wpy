<style lang="less">
  .wifi-control{
    text-align:center;
    .wifi-status{
      width:150px;
      height:150px;
      margin:20px auto;
      .icon{
        font-size: 150px;
      }
    }
    .wifi-info{
      margin-top:15px;
      font-weight:bold;
    }
  }
  .wifi-list{
    width: 100%;
    position:absolute;
    bottom:20px;
    .list-title{
      color: Grey;
      font-size:11pt;
      text-align:center;
    }
  }
</style>
<template>
  <!-- <button type="default" @tap="toTestWifi"> 附近Wifi </button> -->
  <view class="page__bd" style="margin-top: 36rpx">
    <view class="group wifi-control">
      <view class="wifi-status">
        <block wx:if="{{icon=='power'}}">
          <text class="icon slds-icon-power" style="color: #A7A7A7" @tap="toConnectWifi">
          </text>
        </block>
        <block wx:elif="{{icon=='wifi'}}">
          <text class="icon slds-icon-wifi" style="color: #3FAA41">
          </text>
        </block>
      </view>
      <view class="wifi-info">
        <text>{{status}}</text>
      </view>
    </view>
    <view class="wifi-list">
      <view class="list-title">
        <text>{{listTitle}}</text>
      </view>
      <scroll-view  scroll-y style="max-height: 230px;">
        <radio-group bindchange="radioChange">
          <label class="weui-cell weui-check__label" wx:for="{{wifiList}}" wx:key="value">
            <radio class="weui-check" value="{{item.SSID}}" checked="{{item.checked}}"/>
            <view class="weui-cell__bd">{{item.SSID}}</view>
            <view class="weui-cell__ft weui-cell__ft_in-radio" wx:if="{{item.checked}}">
                <icon class="weui-icon-radio" type="success_no_circle" size="16"></icon>
            </view>
          </label>
        </radio-group>
      </scroll-view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import req from '@/network';
export default class Wifi extends wepy.page {
  config = {
    navigationBarTitleText: 'WiFi'
  };

  data = {
    icon: 'power',
    status:'WiFi 未连接',
    current:'',
    selected: {},
    wifiList:[],
    listTitle: '门店 WiFi 列表',
    store_id: ''
  };

  async onLoad(e) {
    wx.showNavigationBarLoading();
    if (e.store_id) {
      this.store_id = e.store_id;
    }
    const _self = this;
    wx.startWifi({
      success: function(res) {}
    })

    // 获取门店wifi
    var wifis = await this.getWifiList();
    if(wifis.value && wifis.value.length>0){
      _self.wifiList = wifis.value;
    }else{
      _self.listTitle = "该商户未配置 Wi-Fi";
    }
    console.log("_self.wifiList",_self.wifiList);

    // 检测获取已连接中的 Wi-Fi 信息
    console.log("检测获取已连接中的 Wi-Fi 信息");
    wx.getConnectedWifi({
      success: function(res) {
        console.log("=====res=======",res)
        var radioItems = _self.wifiList;
        var index = -1;
        if(res.wifi){
          _self.icon = "wifi";
          _self.status = '已连接 ' + res.wifi.SSID;
          _self.current = res.wifi.SSID;
          index = radioItems.findIndex((v) => {
            return v.SSID == res.wifi.SSID
          })

          if(index > -1){
            radioItems[index].checked = true;
            _self.selected = radioItems[index];
          }
        }
      }
    })
    _self.$apply();
    wx.hideNavigationBarLoading();
  };

  methods = {
    toConnectWifi() {
      const _self = this;
      wx.connectWifi({
        SSID: _self.selected.SSID,
        BSSID: _self.selected.BSSID,
        password: _self.selected.password,
        success: function(res){
          console.log("==========res==========",res);
          _self.icon = "wifi";
          _self.status = '已连接 ' + _self.selected.SSID;
          _self.current = _self.selected.SSID;
          _self.$apply();
        },
        fail: function(res){
          console.log('======失败res======', res);
          var errMsg = "调用失败";
          switch(res.errCode) {
            case 12000:
              errMsg = "先调用startWifi接口";
              break;
            case 12001:
              errMsg = "当前系统不支持相关能力";
              break;
            case 12002:
              errMsg = "Wi-Fi 密码错误";
              break;
            case 12003:
              errMsg = "连接超时";
              break;
            case 12004:
              errMsg = "重复连接 Wi-Fi";
              break;
            case 12005:
              errMsg = "未打开 Wi-Fi 开关";
              break;
            case 12006:
              errMsg = "未打开 GPS 定位开关";
              break;
            case 12007:
              errMsg = "用户拒绝授权链接 Wi-Fi";
              break;
            case 12008:
              errMsg = "无效SSID";
              break;
            case 12009:
              errMsg = "系统运营商配置拒绝连接 Wi-Fi";
              break;
            case 12010:
              errMsg = "系统其他错误";
              break;
            case 12011:
              errMsg = "应用在后台无法配置 Wi-Fi";
              break;
          }
          wx.showToast({
            title: errMsg,
            icon: 'none',
            duration: 2000
          })
        }
      });
    }
  };
  getWifiList(){
    // 未传入 store_id，则使用space_id查询store
    var store_id = "";
    if(this.store_id){
      store_id = this.store_id
    }else{
      store_id = this.$parent.globalData.space_id
    }
    const data = {
              $filter: 'store eq ' + store_id,
              $select: 'SSID,BSSID,password'
            };
    return this.$parent.query("vip_wifi",data);
  };
  radioChange(e) {
        console.log('radio发生change事件，携带value值为：', e.detail.value);
        const selectedSSID = e.detail.value;
        const radioItems = this.wifiList;
        for (var i = 0, len = radioItems.length; i < len; i++) {
          if(radioItems[i].SSID == selectedSSID){
            radioItems[i].checked = true;
            if(this.selected.SSID!=selectedSSID){
              this.selected = radioItems[i];
              this.icon = "power";
            }
          }else{
            radioItems[i].checked = false;
          }
        }
        this.wifiList = radioItems;
        this.$apply();
    }
}
</script>
