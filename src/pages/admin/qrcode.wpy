<style lang="less">
page{
  height:100%;
  background-color: #353535;
}

.page {
  height:100%;
  width: 100%;
  background-color: #353535;
  text-align:center;
  image{
    width: 100%;
    height: 100%;
  }
  .canvas {
    width: 100%;
    height: 100%;
    top:-10000px;
  }
  .image-container {
    .qrcode {
      width: 100%;
      height: 100%;
    }
  }
  .qrcode_bd{
    position: absolute;
    margin: auto;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 80%;
    height: 0px;
    padding-top: 80%; 
    .qrcode{
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 113%;
    }
    .qrtext{
      color:white;
    }
  }
}
</style>

<template>
  <view class="page" wx:if="{{is_loaded}}">
    <block wx:if="{{imageUrl}}">
      <image mode="aspectFit" src="{{util.formatImageUrl(imageUrl, baseUrl)}}" @tap="previewImage({{imageUrl}})"/>
    </block>
    <canvas canvas-id="myCanvas" class="canvas"/>
  </view>
</template>

<script>
import wepy from 'wepy';
import req from '@/network';
import { baseUrl, appId } from '@/config'
import util from '../../wxs/util.wxs';
var utilJs = require('../../utils/util.js')

export default class QRCode extends wepy.page {
  config = {
    navigationBarTitleText: '二维码',
    navigationBarBackgroundColor: '#353535',
    navigationBarTextStyle: 'white',
    enablePullDownRefresh: false
  };

  data = {
    baseUrl: baseUrl,
    imgCodeUrl: '',
    space_id:'',
    store_name:'',
    imageUrl: '',
    avatarUrl: '',
    is_loaded: false
  };

  wxs = {
    util: util
  };

  async onLoad(e) {
    wepy.showLoading({
      title: '加载中',
      mask: true
    });
    this.space_id = e.space_id
    this.$apply()
    await this.getqrCode(this.space_id)
    this.is_loaded = true
    this.$apply();
    wepy.hideLoading();
  }
  onShareAppMessage(res) {
    return {
      title: "欢迎加入"+this.store_name,
      path: `pages/admin/qrcode?space_id=${this.space_id}`,
      imageUrl:utilJs.formatImageUrl(this.imageUrl, this.baseUrl)
    };
  }
  async getqrCode(store_id) {
    const result = await this.$parent.get('vip_store', store_id, this.space_id);
    if(result){
      this.store_name = result.name
      this.avatarUrl = result.avatar
      this.$apply();
    }
    if(result &&  result.qrcode && result.qrcode!=''){
      this.imageUrl = result.qrcode;
      this.avatarUrl = result.avatar
      this.$apply();
    }
    else{
      const page = "pages/space/index"
      const url = `/api/steedos/weixin/code?appid=${appId}&scene=${
        store_id
      }&page=${page}`;
      const imgRes = await wepy.downloadFile({
        url: this.baseUrl + url
      })
      if(this.avatarUrl) {
        const avatarRes = await wepy.downloadFile({
          url: utilJs.formatImageUrl(this.avatarUrl, this.baseUrl)
       })
        console.log('res.tempFilePath....',imgRes.tempFilePath)
        const self = this
        const ctx = wepy.createCanvasContext('myCanvas')
        const width = wepy.getSystemInfoSync().windowWidth
        const radius = width * 105/430
        const avatar_x = width/2 - radius/1.414
        const avatar_y = avatar_x
        const avatar_width = radius*1.414
        ctx.drawImage(imgRes.tempFilePath, 0, 0, width, width)
        ctx.arc(width/2, width/2, radius, 0, 2 * Math.PI)
        ctx.setFillStyle('white')
        ctx.fill()
        const avatar_radius = radius-6
        ctx.save()
        ctx.beginPath()
        ctx.arc(width/2, width/2, avatar_radius, 0, 2 * Math.PI)
        ctx.setFillStyle('white')
        ctx.fill()
        ctx.clip()
        ctx.drawImage(avatarRes.tempFilePath, width/2-avatar_radius, width/2-avatar_radius, 2*avatar_radius, 2*avatar_radius)
        ctx.restore();
        console.log("avatarUrl",this.avatarUrl);
        ctx.draw(true, async ()=>{
          let x = self;
          const res = await wepy.canvasToTempFilePath({
            width:width,
            height:width,
            destWidth:width,
            destHeight:width,
            canvasId: 'myCanvas',
            fileType: 'jpeg'
          });
          self.imageUrl = res.tempFilePath
          self.imgCodeUrl = res.tempFilePath
          self.$apply()
          const authToken = self.$parent.globalData.user.auth_token;
          const userId = self.$parent.globalData.user._id;
          const fileResult = await wepy.uploadFile({
            url: `${self.baseUrl}/s3/images`,
            filePath: res.tempFilePath,
            name: 'file',
            // formData: formData,
            header: {
              'X-Auth-Token': authToken,
              'X-User-Id': userId
            }
          })
          const fileData = JSON.parse(fileResult.data);
          const space = await this.$parent.get('spaces', store_id, this.space_id);
          const admins = space.admins
          const is_space_admin = admins && admins.includes(userId);
          if(is_space_admin) {
            const data = {
            qrcode: fileData['_id']
            };
            var store = await this.$parent.update('vip_store',store_id, data, this.space_id);
          }
        
        });
      }
      else {
        this.imageUrl = imgRes.tempFilePath
        this.imgCodeUrl = imgRes.tempFilePath
      } 
      this.$apply();
    }
    // }
  }
  
  methods = {
    previewImage(image, event){
      var baseUrl = this.baseUrl;
      var current = `${baseUrl}/api/files/images/${image}`;
      var urls = []
      if(this.imgCodeUrl) {
        urls.push(this.imgCodeUrl)
      }
      else {
        urls.push(`${baseUrl}/api/files/images/${image}`)
      }
      wx.previewImage({
        current: current,
        urls: urls
      });
    }
  }
}
</script>