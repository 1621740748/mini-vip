<style lang="less">
.address-box {
  width: 100%;
  box-sizing: border-box;
  background: #fffced
    url(http://yanxuan.nosdn.127.net/hxm/yanxuan-wap/p/20161201/style/img/icon-normal/address-bg-bd30f2bfeb.png)
    0 0 repeat-x;
  background-size: auto 10.5rpx;
  margin-bottom: 20rpx;

  .address-item {
    padding: 32rpx 31.25rpx;
    align-items: stretch;
    display: flex;
    font-size: 30rpx;
  }

  .l {
    width: 125rpx;
    height: 100%;
    overflow: hidden;
  }

  .name {
    width: 100%;
    line-height: 44rpx;
    font-size: 34rpx;
    color: #333;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    margin-bottom: 8rpx;
  }

  .default {
    width: 62.5rpx;
    text-align: center;
    font-size: 20rpx;
    color: #b4282d;
    border-radius: 5rpx;
    border: 1rpx solid #b4282d;
    visibility: visible;
    &.hide {
      visibility: hidden;
    }
  }

  .c {
    flex: 1;
    height: 100%;
    overflow: hidden;
    margin-left: 20rpx;
  }

  .mobile {
    line-height: 44rpx;
    margin-bottom: 8rpx;
    font-size: 32rpx;
    overflow: hidden;
    color: #333;
  }

  .address {
    font-size: 30rpx;
    overflow: hidden;
    color: rgb(158, 158, 158);
  }

  .m {
    flex: 1;
  }

  .r {
    display: flex;
    position: relative;
    justify-content: center;
    align-items: center;
    align-self: center;
    width: 50rpx;
    height: 50rpx;
  }
}

.order-box {
  background: #fff;
  margin-bottom: 20rpx;

  .order-item {
    box-sizing: border-box;
    padding: 32rpx 31.25rpx 32rpx 0;
    margin-left: 31.25rpx;
    width: auto;
    height: auto;
    overflow: hidden;
    display: flex;
    border-bottom: 1px solid #d9d9d9;

    &:last-of-type {
      border-bottom: none;
    }

    .l {
      flex: 1;
    }
  }
}

.goods-items {
  width: 100%;
  height: auto;
  overflow: hidden;
  background: #fff;
  margin-bottom: 20rpx;

  .item {
    display: flex;
    width: auto;
    overflow: hidden;
    padding: 0 31.25rpx;
  }

  .cart-goods {
    flex: 1;
    display: flex;
    float: left;
    border-bottom: 1px solid #d9d9d9;
  }

  .item:last-of-type {
    .cart-goods {
      border-bottom: none;
    }
  }

  .img {
    float: left;
    height: 150rpx;
    width: 150rpx;
    background: #f4f4f4;
    margin: 19.5rpx 18rpx 19.5rpx 0;
  }

  .info {
    flex: 1;
    float: left;
    height: 150rpx;
    margin: 19.5rpx 0 19.5rpx 0;
    align-items: center;
  }

  .t {
    display: flex;
    margin: 8rpx 0;
    font-size: 30rpx;
    color: #333;
    overflow: hidden;
  }

  .name {
    flex: 1;
    color: #333;
    overflow: hidden;
    font-size: 15px;
    line-height: 46rpx;
    max-height: 87rpx;
    text-overflow: ellipsis;
    display: -webkit-box !important;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    margin-right: 15px;
  }

  .num {
    font-size: 14px;
  }

  .b {
    display: flex;
    font-size: 28rpx;
    color: #333;
  }

  .price {
    flex: 1;
    line-height: 52rpx;
    font-size: 14px;
  }
}

.order-total {
  position: fixed;
  left: 0;
  bottom: 0;
  height: 100rpx;
  width: 100%;
  display: flex;
}

.order-total .t {
  height: 100rpx;
  line-height: 100rpx;
  background: #fff;
  font-size: 32rpx;
  padding-left: 31.25rpx;
  border-top: 1rpx solid rgba(0, 0, 0, 0.2);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.2);
}

.order-total .l {
  flex: 1;
  height: 100rpx;
  line-height: 100rpx;
  color: #b4282d;
  background: #fff;
  font-weight: bold;
  font-size: 34rpx;
  border-top: 1rpx solid rgba(0, 0, 0, 0.2);
  border-bottom: 1rpx solid rgba(0, 0, 0, 0.2);
}

.order-total .r {
  width: 233rpx;
  height: 100rpx;
  background: #b4282d;
  border: 1px solid #b4282d;
  line-height: 100rpx;
  text-align: center;
  color: #fff;
  font-size: 32rpx;
}

.order-time {
  padding: 32rpx 31.25rpx;
  background: #fff;
  margin-bottom: 20rpx;
}

.user-info {
  background: #fff;
  margin-bottom: 20rpx;
  .address {
    padding: 32rpx 31.25rpx 32rpx 0;
    border-bottom: 1rpx solid rgba(0, 0, 0, 0.2);
    margin-left: 31.25rpx;
    .info {
      display: flex;
      .name {
        margin-right: 40rpx;
      }
    }
  }
  .pay {
    padding: 32rpx 31.25rpx 32rpx 0;
    margin-left: 31.25rpx;
    .info {
      display: flex;
      .title {
        min-width: 80px;
      }
      .price {
        color: #b4282d;
      }
    }
  }
}
</style>
<template>
  <view class="page" wx:if="{{is_loaded}}">
    <block wx:if="{{is_readonly}}">
      <view class="order-time">
        <view class="text">
          下单时间: {{util.formatDate(order.created, '-')}}
        </view>
        <view class="text">
        </view>
      </view>
    </block>
    <block wx:else>
      <view class="address-box" wx:if="{{!is_readonly}}">
        <view class="address-item" @tap="selectAddress" wx:if="{{checkedAddress._id}}">
          <view class="l">
            <view class="name">{{checkedAddress.name}}</view>
            <view class="default {{checkedAddress.is_default ? 'show' : 'hide'}}">默认</view>
          </view>
          <view class="c">
            <view class="mobile">{{checkedAddress.phone}}</view>
            <view class="address">{{checkedAddress.address.address}}{{checkedAddress.door ? checkedAddress.door : ''}}</view>
          </view>
          <view class="r after-chevronright">
          </view>
        </view>

        <view class="address-item address-empty" bindtap="selectAddress" wx:if="{{!checkedAddress._id}}">
          <view class="m">
            还没有收货地址，去添加
          </view>
          <view class="r after-chevronright">
          </view>
        </view>
      </view>
    </block>

    <view class="order-box">
      <view class="order-item">
        <view class="l">
          <text class="name">金额合计</text>
        </view>
        <view class="r">
          <text class="txt">￥{{goodsTotalPrice}}</text>
        </view>
      </view>
      <!-- <view class="order-item">
        <view class="l">
          <text class="name">运费</text>
        </view>
        <view class="r">
          <text class="txt">￥{{freightPrice}}</text>
        </view>
      </view>
      <view class="order-item no-border">
        <view class="l">
          <text class="name">优惠券</text>
        </view>
        <view class="r">
          <text class="txt">-￥{{couponPrice}}</text>
        </view>
      </view> -->
    </view>

    <view class="goods-items">
      <repeat for="{{checkedProductList}}" key="index" index="index" item="goods">
        <navigator class="item" url="/pages/product/view?product_id={{goods._id}}&space_id={{goods.space || order.space}}">
          <view class="cart-goods">
            <image class="img" src="{{util.formatImageUrl(goods.avatar, baseUrl)}}" mode="aspectFill"></image>
            <view class="info">
              <view class="t">
                <view class="name">{{goods.name}}</view>
                <text class="num">x{{goods.count}}</text>
              </view>
              <view class="b">
                <text class="price">￥{{goods.default_price}}</text>
              </view>
            </view>
          </view>
        </navigator>
      </repeat>
    </view>

    <view class="user-info" wx:if="{{is_readonly}}">
      <view class="address">
        <view class="info">
          <view class="name">{{checkedAddress.name}}</view>
          <view>{{checkedAddress.phone}}</view>
        </view>
        <view>{{checkedAddress.address.address}}{{checkedAddress.door ? checkedAddress.door : ''}}</view>
      </view>
      <view class="pay">
        <view class="info">
          <view class="title">支付方式:</view>
          <view class="res">微信</view>
        </view>
        <view class="info">
          <view class="title">实付:</view>
          <view class="price">￥{{goodsTotalPrice}}</view>
        </view>
      </view>
    </view>

    <view class="order-total" wx:if="{{!is_readonly}}">
      <view class="t">实付：</view>
      <view class="l">￥{{goodsTotalPrice}}</view>
      <view class="r" bindtap="submitOrder">去付款</view>
    </view>
    <view wx:else>
      <view class="weui-btn-area" wx:if="{{status == 'pending' && isOrderOwner}}">
        <button class="weui-btn" type="primary" @tap="submitOrder">微信支付</button>
        <button class="weui-btn" type="default" @tap="updateOrderStatus('canceled')">取消订单</button>
      </view>
      <view class="order-total" wx:elif="{{status == 'paid' && isSpaceAdmin}}">
        <view class="t"></view>
        <view class="l"></view>
        <view class="r" bindtap="updateOrderStatus('delivered')">确认发货</view>
      </view>
      <view class="order-total" wx:elif="{{status == 'delivered' && isOrderOwner}}">
        <view class="t"></view>
        <view class="l"></view>
        <view class="r" bindtap="updateOrderStatus('completed')">确认收货</view>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import { connect, getStore } from 'wepy-redux';
import util from '../../wxs/util.wxs';
import { baseUrl } from '@/config';
import pageRouter from '@/utils/pageRouter';
import _ from 'underscore';
import req from '@/network';

const store = getStore();

export default class Checkout extends wepy.page {
  config = {
    navigationBarTitleText: '',
    backgroundColor: '#f4f4f4'
  };

  data = {
    baseUrl: baseUrl,
    is_readonly: false,
    is_loaded: false,
    order: {},
    checkedProductList: [],
    checkedAddress: {},
    checkedCoupon: [],
    couponList: [],
    goodsTotalPrice: 0.0,
    freightPrice: 0.0, // 快递费
    couponPrice: 0.0, // 优惠券的价格
    orderTotalPrice: 0.0, // 订单总价
    actualPrice: 0.0, // 实际需要支付的总价
    addressId: 0,
    couponId: 0,
    status: '',
    isSpaceAdmin: false,
    isOrderOwner: false
  };

  wxs = {
    util: util
  };

  getcheckedProductList() {
    const cartList = store.getState().counter.cartList;
    const checkedProductList = [];
    cartList.forEach(p => {
      p.checked ? checkedProductList.push(p) : checkedProductList;
    });
    return checkedProductList;
  }

  getgoodsTotalPrice(checkedProductList) {
    let goodsTotalPrice = 0;
    if (checkedProductList && checkedProductList.constructor === Array) {
      checkedProductList.forEach(p => {
        goodsTotalPrice += p.default_price * p.count;
      });
    }
    return goodsTotalPrice.toFixed(2);
  }

  async onLoad(e) {
    wepy.showLoading({
      title: '加载中'
    });

    console.log(e);
    await this.$parent.login();

    if (e.object_name == 'vip_order' && e.record_id && e.space_id) {
      const order = await this.$parent.get('vip_order', e.record_id, e.space_id);
      if (order) {
        console.log('[order]', order);
        wx.setNavigationBarTitle({ title: '订单详情' });
        this.order = order;
        this.checkedAddress = order.address;
        this.checkedProductList = order.products;
        this.goodsTotalPrice = order.amount;
        this.status = order.status;
        this.is_readonly = true;
        this.isSpaceAdmin = this.$parent.isSpaceAdmin(order.space);
        this.isOrderOwner = (order.owner == this.$parent.globalData.user._id);
      }
    } else if (e.product) {
      const product = JSON.parse(e.product);
      wx.setNavigationBarTitle({ title: '填写订单' });
      this.checkedProductList = [product];
      this.goodsTotalPrice = this.getgoodsTotalPrice(this.checkedProductList);
    } else {
      wx.setNavigationBarTitle({ title: '填写订单' });
      this.checkedProductList = this.getcheckedProductList();
      this.goodsTotalPrice = this.getgoodsTotalPrice(this.checkedProductList);
    }
    this.$apply();
  }

  async onShow(e) {
    await this.$parent.login();
    const user_id = this.$parent.globalData.user._id;
    const options = {
      $filter: `owner eq '${user_id}'`
    };
    const result = await this.$parent.query('vip_address', options, 'guest');

    if (result && result.value && result.value[0] && _.isEmpty(this.checkedAddress)) {
      this.checkedAddress = result.value[0];
      for (let address of result.value) {
        if (address.is_default) {
          this.checkedAddress = address;
        }
      }
    }

    this.is_loaded = true;
    this.$apply();

    wepy.hideLoading();
  }

  upDateAddress(address) {
    if (address) {
      this.checkedAddress = address;
    }
  }

  computed = {};

  methods = {
    selectAddress() {
      wepy.navigateTo({
        url: '../address/list?is_choose=true'
      });
    },
    async submitOrder() {
      // const data = {
      //   address: this.checkedAddress,
      //   amount: this.goodsTotalPrice,
      //   products: this.checkedProductList
      // };
      if (!this.checkedAddress._id) {
        wx.showToast({
          title: '请选择收货地址',
          icon: 'none',
          duration: 2000
        });
        return;
      }
      wx.showLoading({
        title: '正在准备支付',
        mask: true
      });
      var amount = parseFloat(parseFloat(this.goodsTotalPrice).toFixed(2));
      var orderId = '';
      if (this.order) {
        orderId = this.order._id;
      } else {
        var spaceId = this.checkedProductList[0].space;
        var products = [];
        this.checkedProductList.forEach(p => {
          var tp = {};
          Object.keys(p).forEach(k => {
            if (k.indexOf('@odata.') < 0) {
              tp[k] = p[k];
            }
          });
          products.push(tp);
        });

        var address = {};
        Object.keys(this.checkedAddress).forEach(k => {
          if (k.indexOf('@odata.') < 0) {
            address[k] = this.checkedAddress[k];
          }
        });
        var newOrder = {
          name: '商城购物',
          amount: amount,
          status: 'draft',
          store: spaceId,
          type: 'pay',
          owner: this.$parent.globalData.user._id,
          address: address,
          products: products
        };
        var o = await this.$parent.insert('vip_order', newOrder, spaceId);
        if (o.value) {
          orderId = o.value[0]._id;
        } else if (o.error) {
          console.error(o.error);
          return;
        }
      }

      var data = {
        amount: amount,
        order_id: orderId
      };
      var that = this;
      req.post('/api/steedos/weixin/card/recharge', data).then(res => {
        wx.hideLoading();
        console.log('res: ', res);

        if (res.paySign) {
          wx.requestPayment({
            timeStamp: res.timeStamp,
            nonceStr: res.nonceStr,
            package: res.package,
            signType: 'MD5',
            paySign: res.paySign,
            success: function(msg) {
              console.log('success: ', msg);
              that.status = 'paid';
              that.$apply();
            },
            fail: function(msg) {
              console.log('fail: ', msg);
            },
            complete: function(msg) {}
          });
        } else {
          console.error(res);
          wx.showModal({
            content: '请求超时，请检查网络状况',
            showCancel: false
          });
        }
      });
    },
    async updateOrderStatus(status) {
      wx.showLoading({
        title: '加载中',
        mask: true
      });
      var result = await this.$parent.update('vip_order', this.order._id, {status: status}, this.order.space);
      wx.hideLoading();
      if (result.error) {
        console.error(result);
        wx.showToast({
          title: '出错啦!',
          icon: 'none'
        })
      } else {
        this.status = status;
        this.$apply();
        wx.showToast({
          icon: 'success'
        })
      }
    }
  };

  async getCheckoutInfo() {
    let res = await util.request(api.CartCheckout, {
      addressId: this.addressId,
      couponId: this.couponId
    });
    if (res.errno === 0) {
      console.log(res.data);
      this.checkedGoodsList = res.data.checkedGoodsList;
      this.checkedAddress = res.data.checkedAddress;
      this.actualPrice = res.data.actualPrice;
      this.checkedCoupon = res.data.checkedCoupon;
      this.couponList = res.data.couponList;
      this.couponPrice = res.data.couponPrice;
      this.freightPrice = res.data.freightPrice;
      this.goodsTotalPrice = res.data.goodsTotalPrice;
      this.orderTotalPrice = res.data.orderTotalPrice;
      this.$apply();
    }
    wepy.hideLoading();
  }
}
</script>
