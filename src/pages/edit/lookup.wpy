<style lang="less">
  .page-edit-lookup{
    .tab-bar {
      display: flex;
      position: fixed;
      z-index: 500;
      bottom: 0;
      height: 50px;
      width: 100%;
      background-color: #F7F7FA;
      justify-content: center;
      align-items: center;

      &::before {
        content: " ";
        position: absolute;
        left: 0;
        top: 0;
        right: 0;
        height: 1px;
        border-top: 1px solid #C0BFC4;
        color: #C0BFC4;
        -webkit-transform-origin: 0 0;
        transform-origin: 0 0;
        -webkit-transform: scaleY(0.5);
        transform: scaleY(0.5);
      }
    }

    .avatar-field {
      border-radius: 0.15rem;
      margin-right: 5px;
      vertical-align: middle;
      width: 40px;
      height: 40px;
    }

    .page__hd {
      padding: 0px;
    }
  }
</style>

<template>
  <view class="page-edit-lookup">

    <view class="page__hd">
      <searchbar :placeholder.sync="searchPlaceholder" @confirm.user="searchRecords" />
    </view>

    <view class="page__bd">
      <view class="weui-cells" wx:if="{{objects.length > 0}}">
        <view class="weui-cell weui-cell_select">
          <view class="weui-cell__bd">
            <picker bindchange="bindObjectCodeChange" value="{{objectCodeIndex}}" range="{{objects}}" range-key="label">
              <view class="weui-select">{{objects[objectCodeIndex].label}}</view>
            </picker>
          </view>
        </view>
      </view>

      <view class="weui-cells" wx:if="{{options.length > 0}}">
        <checkbox-group bindchange="selectChange" data-id="{{key}}" wx:if="{{multiple}}">
          <repeat for="{{options}}" key="index" index="index" item="option">
            <label class="weui-cell weui-check__label">
              <checkbox class="weui-check" value="{{option.value}}" checked="{{option.checked}}" />
              <view class="weui-cell__hd" wx:if="{{showAvatar}}">
                <image src="{{util.formatAvatarImageUrl(option.avatar, baseUrl)}}" class='avatar-field'></image>
              </view>
              <view class="weui-cell__bd">{{option.label}}</view>
              <view class="weui-cell__ft weui-cell__ft_in-radio" wx:if="{{option.checked}}">
                <icon class="weui-icon-radio" type="success_no_circle" size="16"></icon>
              </view>
            </label>
          </repeat>
        </checkbox-group>
        <radio-group bindchange="radioChange" data-id="{{key}}" wx:else>
          <repeat for="{{options}}" key="index" index="index" item="option">
            <label class="weui-cell weui-check__label">
              <radio class="weui-check" value="{{option.value}}" checked="{{option.checked}}"/>
              <view class="weui-cell__hd" wx:if="{{showAvatar}}">
                <image src="{{util.formatAvatarImageUrl(option.avatar, baseUrl)}}" class='avatar-field'></image>
              </view>
              <view class="weui-cell__bd">{{option.label}}</view>
              <view class="weui-cell__ft weui-cell__ft_in-radio" wx:if="{{option.checked}}">
                <icon class="weui-icon-radio" type="success_no_circle" size="16"></icon>
              </view>
            </label>
          </repeat>
        </radio-group>
      </view>
      <view class="weui-loadmore weui-loadmore_line" wx:else>
        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">暂无记录</view>
      </view>
    </view>
    <view class="tab-bar" wx:if="{{allowCreate}}">
      <view class="slds-icon-action-new" @tap="addRecord"></view>
    </view>
  </view>
</template>


<script>
  import wepy from 'wepy';
  import _ from 'underscore';
  import pageRouter from '@/utils/pageRouter';
  import util from '../../wxs/util.wxs';
  import searchbar from '../../components/searchbar';

  export default class Lookup extends wepy.page {
    config = {
      navigationBarTitleText: '选择'
    };

    components = {
      searchbar: searchbar
    };

    data = {
      space_id: '',
      key: '',
      objects: [],
      options: [],
      multiple: false,
      objectCode: '',
      objectCodeIndex: 0,
      allowCreate: false,
      field: {},
      filters: '',
      showAvatar: false,
    };

    wxs = {
      util: util
    };

    async refresh(action, record_id){
      console.log('lookup ref', record_id)
      this.options = await this.getReferenceTo(this.objectCode);
      const fieldValue = this.getObjectFieldValue(this.key) || {};
      console.log('fieldValue', fieldValue)
      if(!_.isEmpty(fieldValue)){
        if(this.multiple){
          fieldValue.forEach((v)=>{
            let so = _.find(this.options, (o)=>{
              return o.value === v._id
            });
            if(so){
              so.checked = true
            }
          })
        }
      }

      if(record_id){
        let so = _.find(this.options, (o)=>{
          return o.value === record_id
        });
        if(so){
          so.checked = true
        }
      }

      if(this.multiple){
        const value = this.getCheckboxValue(this.options)
        this.setParentValue(this.key, value)
      }else{
        const value = this.getRadioValue(this.options)
        this.setParentValue(this.key, value)
      }

      this.$apply()
    }

    async getObjects(object_names){
      wepy.showLoading({
        title: '正在保存',
        mask: true
      });
      let objects = [];
      (await this.$parent.getObjects(object_names, this.space_id)).forEach((object)=>{
        objects.push({label: object.label || object.name, value: object.name})
      });
      wepy.hideLoading();
      return objects;
    }

    setParentValue(key, value){
      const pages = getCurrentPages();
      const prevPage = pages[pages.length - 2];
      console.log('setParentValue', key, value)
      prevPage.changeValue(key, value)
//      prevPage.data.$autoform$values[key] = value

//      let values = prevPage.data.$autoform$values;
//      values[key] = value;
//      prevPage.setData({values: values})
      this.$apply();
    }

    getObjectField(key){
      const pages = getCurrentPages();
      const prevPage = pages[pages.length - 2];
      return prevPage.data.$autoform$schema.fields[key]
    }

    getObjectFieldValue(key){
      const pages = getCurrentPages();
      const prevPage = pages[pages.length - 2];
      return prevPage.data.$autoform$values[key]
    }

    transformFilterToDev(filters){
      let query = [];
      filters.forEach((filter)=>{
        if(filter.length === 3){
          let key = filter[0];
          let operation = filter[1];
          let value = filter[2];

          if(operation === '='){
            query.push(`(${key} eq '${value}')`)
          }
        }else{
          throw new Error('无效的filter', filter)
        }
      })

      return query.join(' and ')
    }

    async getReferenceTo(reference_to, searchValue) {

      wepy.showLoading({
        title: '正在保存',
        mask: true
      });

      if(_.isArray(reference_to)){
        return []
      }

      let query = {
        $select: 'name'
      };
      if (reference_to === 'users' || reference_to === 'space_users') {
        this.showAvatar = true;
        reference_to = 'space_users';
        query.$select = 'name,user';
        query.$expand = 'user($select=profile)'
      }
      if(searchValue){
        if(this.filters){
          query.$filter = this.transformFilterToDev(this.filters) + ` and (contains(name,'${searchValue}'))`
        }else{
          query.$filter = `(contains(name,'${searchValue}'))`
        }
      }else{
        if(this.filters){
          query.$filter = this.transformFilterToDev(this.filters)
        }
      }


      const data = await this.$parent.query(reference_to, query, this.space_id);
      let options = [];
      data.value.forEach(function (record) {
        let option = {label: record.name};
        if (reference_to === 'space_users') {
          option.value = record.user._id
          if(record.user.profile){
            option.avatar = record.user.profile.avatar
          }
        }else if(reference_to === 'objects'){
          option.value = record.name
        } else {
          option.value = record._id
        }
        options.push(option);
      });
      wepy.hideLoading();
      return options
    }

    async onLoad(e) {
      if (!e) {
        e = {}
      }

      this.key = e.key;

      const field = this.getObjectField(e.key);

      this.filters = field.filters;

      const fieldValue = this.getObjectFieldValue(e.key) || {};

      this.multiple = field.multiple || false;

      this.space_id = e.space_id;

      if(_.isArray(field.reference_to)){
        this.objects = await this.getObjects(field.reference_to);
        if(this.objects.length > 0){

          let rto = fieldValue["o"];

          if(fieldValue["reference_to.o"]){
            rto = fieldValue["reference_to.o"]
          }

          if(rto){
            this.objects.forEach((o, i)=>{
              if(o.value === rto){
                this.objectCode = o.value;
                this.objectCodeIndex = i;
              }
            })
          }else{
            this.objectCode = this.objects[0].value
          }
        }
        this.options = await this.getReferenceTo(this.objectCode);

        if(fieldValue && fieldValue['_id']){
          this.options.forEach((o)=>{
            if(o.value === fieldValue['_id']){
              o.checked = true
            }
          })
        }
      }else{
        this.objectCode = field.reference_to
        this.options = await this.getReferenceTo(this.objectCode);
        console.log('fieldValue', fieldValue);

        if(!_.isEmpty(fieldValue)){
          if(this.multiple){
            fieldValue.forEach((v)=>{
              let so = _.find(this.options, (o)=>{
                return o.value === v._id
              });
              if(so){
                so.checked = true
              }
            })
          }else{
            let so = _.find(this.options, (o)=>{
              return o.value === fieldValue._id
            });
            if(so){
              so.checked = true
            }
          }
        }
        const object = await this.$parent.getObject(field.reference_to, this.space_id);
        console.log('object', object)
        this.allowCreate = object.allowCreate;
      }

      this.$apply();

      if (e.title) {
        wx.setNavigationBarTitle({title: '选择' + e.title});
      }
    }

    getRadioValue(radioItems){
      const checkedItem  = _.find(radioItems, function(item){ return item.checked});
      return {_id: checkedItem.value, name: checkedItem.label}
    }

    getCheckboxValue(checkboxItems){
      const checkedItems = _.filter(checkboxItems, function(item){ return item.checked; });
      let field_values = [];
      _.forEach(checkedItems, function (item) {
        field_values.push({_id: item.value, name: item.label})
      });

      return field_values
    }

    methods = {
      selectChange: function (e) {
        console.log('lookup selectChange', e)
        const values = e.detail.value, key = this.key;
        let checkboxItems = this.options;
        for (let i = 0, lenI = checkboxItems.length; i < lenI; ++i) {
          checkboxItems[i].checked = false;
          for (let j = 0, lenJ = values.length; j < lenJ; ++j) {
            if (checkboxItems[i].value == values[j]) {
              checkboxItems[i].checked = true;
              break;
            }
          }
        }
        let field_values = this.getCheckboxValue(checkboxItems)
        this.setParentValue(key, field_values)
      },
      radioChange: async function (e) {
        console.log('lookup radioChange', e)
        const radioItems = this.options, key = this.key;
        for (let i = 0, len = radioItems.length; i < len; ++i) {
          radioItems[i].checked = radioItems[i].value == e.detail.value;
        }

        let value = this.getRadioValue(radioItems);

        if(this.objects && _.isArray(this.objects)){
          value.object_name = this.objectCode
          value.object_label = (await this.$parent.getObject(value.object_name, this.space_id)).label
        }

        this.setParentValue(key, value)
      },
      bindObjectCodeChange: async function (e){
        console.log('lookup bindObjectCodeChange', e)
        this.objectCodeIndex = e.detail.value;
        this.objectCode = this.objects[this.objectCodeIndex].value;
        this.options = await this.getReferenceTo(this.objectCode);
        this.setParentValue(this.key, {object_name: this.objectCode, object_label: (await this.$parent.getObject(this.objectCode, this.space_id)).label});
      },
      addRecord: function (e) {
        wepy.navigateTo({
          url: `/pages/record/create_child?object_name=${this.objectCode}&space_id=${this.space_id}`
        })
      },
      searchRecords: async function(searchValue, evt) {
        this.options = await this.getReferenceTo(this.objectCode, searchValue);
        this.$apply();
      }
    }
  }
</script>
