<style lang="less">
.page {
  padding-bottom: 20px !important;
}

.cover-page {
  .page__hd {
    .love-title {
      margin-top: 120rpx;
    }

    .love-avatar {
      width: 160rpx;
      height: 160rpx;
      margin: 30rpx auto 0;

      view {
        width: 100%;
        height: 100%;

        .image {
          width: 100%;
          height: 100%;
          border-radius: 50%;
        }
      }

      .user-active {
        border: none;
        width: 100%;
        height: 100%;
        padding: 0;
      }
    }
  }

  .group {
		box-shadow: #aaa 0px 0px 10px;
    background: #fff;
    margin-top: 30rpx;
    padding: 30rpx;
    border-radius: 0.25rem;
    .header {
      display: flex;
      line-height: 1.41176471;
      font-size: 17px;
      .group-name {
        flex: 1;
      }
    }
    .body {
      display: flex;
      margin-top: 16rpx;
      .count {
        color: #999;
        flex: 1;
      }
      .join-avatar {
        display: flex;
        align-items: center;
        .avatar-container {
          width: 50rpx;
          height: 50rpx;
          border-radius: 50%;
          border: 1px solid #fff;
          image {
            border-radius: 50%;
            width: 100%;
            height: 100%;
          }
        }
        .avatar-container:not(:last-of-type) {
					margin-right: -16rpx;
        }
      }
    }
  }
}
</style>

<template>
<view>
	<view class="cover-page-bg"></view>
	<view class="cover-page" wx:if="{{is_loaded}}">
		<view class="page__hd">
			<view class='love-avatar'>
				<block wx:if="{{isAuthUserInfo}}">
					<view class="" style="">
						<image class="image" mode="aspectFill" wx:if="{{isAuthUserInfo}}" src="{{avatar}}"></image>
					</view>
				</block>
				<block wx:else>
					<button open-type="getUserInfo" bindgetuserinfo="userLogin" plain="true" class="user-active">
						<view class="">
							<image class="image" mode="aspectFill" src="https://lg-769qcuso-1253849369.cos.ap-shanghai.myqcloud.com/avatar.png"></image>
						</view>
					</button>
				</block>
			</view>
		</view>
		<view class="page__bd">
			<navigator class="group" url="/pages/love/matching?space_id={{space_id}}&open_group_id=-1">
				<view class="header">
					<view class="group-name">
						<view class="group-name">好友缘分总榜</view>
					</view>
					<view class="weui-cell__ft weui-cell__ft_in-access"></view>
				</view>
				<view class="body">
					<view class="count">{{friendList.count}}人</view>
					<view class="join-avatar">
						<repeat for="{{friendList.value}}" key="index" index="index" item="friend">
							<block wx:if="{{friend.user_b.name}}">
								<view class="avatar-container">
									<image class="image" mode="aspectFill" src="{{friend.user_b.profile.avatar}}"></image>
								</view>
							</block>
						</repeat>
					</view>
				</view>
			</navigator>

			<repeat for="{{groups}}" key="index" index="index" item="group">
				<navigator class="group" url="/pages/love/matching?space_id={{space_id}}&open_group_id={{group.open_group_id}}">
					<view class="header">
						<view class="group-name">
							<open-data class="group-name" type="groupName" open-gid="{{group.open_group_id}}"></open-data>
						</view>
						<view class="weui-cell__ft weui-cell__ft_in-access"></view>
					</view>
					<view class="body">
						<view class="count">{{group.count}}人</view>
						<view class="join-avatar">
							<repeat for="{{group.users}}" key="index" index="index" item="user">
                <view class="avatar-container" style="z-index: {{group.count - index}}">
                  <image class="image" mode="aspectFill" src="{{baseUrl + '/avatar/' + user}}"></image>
                </view>
							</repeat>
						</view>
					</view>
				</navigator>
			</repeat>

			<!--
			<view class="weui-cells">
				<navigator class="weui-cell weui-cell_access" url="/pages/love/shake" hover-class="weui-cell_active">
					<view class="weui-cell__bd">
						每周有缘人
					</view>
					<view class="weui-cell__ft weui-cell__ft_in-access"></view>
				</navigator>
			</view>
			-->

		</view>
	</view>
</view>
</template>

<script>
import wepy from 'wepy';
import { loveSpaceId } from '../../config/index.js';
import req from '@/network';
import _ from 'underscore'
import { baseUrl } from '@/config';

export default class LoveHome extends wepy.page {
  config = {
		navigationBarTitleText: '缘分圈',
		enablePullDownRefresh: true
  };

  data = {
    navigationBarTitle: '缘分圈',
    user_id: '',
    is_loaded: false,
    space_id: null,
    friendList: [],
    groups: [],
    avatar: '',
    name: '',
    group_friends: {},
    isAuthUserInfo: false,
    baseUrl: baseUrl
  };

  onShareAppMessage(res) {
    const user_id = this.$parent.globalData.user._id;
    let title = '我们的缘分排行榜，快来打榜！';
    let path = `/pages/love/home?share_from=${user_id}`;
    return {
      title: title,
      path: path
    };
	}

	async onPullDownRefresh() {
		const self = this;
		wx.showLoading();
		await this.loadGroups();
    await this.loadFriendList();
		this.$apply();
		wx.stopPullDownRefresh();
		wx.hideLoading();
	}

  async onLoad(e) {
    wepy.showShareMenu({
      withShareTicket: true
    });
    wx.showLoading();
    const self = this;
    e.space_id = loveSpaceId;
    if (e.scene) {
      // 朋友圏二维码识别进入的，则取出scene中的share_from
      let scene = decodeURIComponent(e.scene);
      let scenes = scene.split('=');
      e.love = 1;
      e.share_from = scenes[1];
      e.qrcode = 1;
    }
    this.space_id = e.space_id;
    await this.$parent.login(e);
    this.user_id = this.$parent.globalData.user._id;

    await this.loadGroups();
    await this.loadFriendList();

    let user = this.$parent.globalData.user;
    const spaceId = this.space_id;
    const userId = user._id;

    if (!user.name || !user.avatar) {
      const query_options = {
        $filter: `owner eq '${userId}'`,
        $expand: 'owner($select=profile,name)'
      };

      const user_result = await this.$parent.query(
        'vip_customers',
        query_options,
        spaceId
      );
      if (user_result && user_result.value[0]) {
        user.name = user_result.value[0].owner.name;
        if (user_result.value[0].owner.profile) {
          user.avatar = user_result.value[0].owner.profile.avatar;
        }
      }
    }

    this.name = user.name;
    this.avatar = user.avatar;

    if (!this.name || !this.avatar) {
      const setting = await wepy.getSetting();
      if (setting.authSetting['scope.userInfo']) {
        const info = await wepy.getUserInfo();
        const userInfo = info.userInfo;
        this.$parent.globalData.userInfo = userInfo;
        this.name = userInfo.nickName;
        this.avatar = userInfo.avatarUrl;
        this.isAuthUserInfo = true;
      } else {
        this.isAuthUserInfo = false;
      }
    } else {
      this.isAuthUserInfo = true;
    }

    this.is_loaded = true;
    this.$apply();

    wx.hideLoading();
  }

  // async onShow() {
  // 	wx.showLoading({mask: true});
  // 	this.is_loaded = false;
  // 	await this.loadGroups();
  //   await this.loadFriendList();
  //   let group_friends = {};
  //   for (let group of this.groups) {
  //     let result = await self.loadGroupFriends(group.open_group_id);
  //     group_friends[group.open_group_id] = result;
  //   }
  // 	this.group_friends = group_friends;
  // 	this.is_loaded = true;

  // 	console.log('[groups]', this.groups);
  //   console.log('[friendList]', this.friendList);
  //   console.log('[group_friends]', group_friends);

  // 	this.$apply();
  // 	wx.hideLoading()
  // }

  async loadFriendList() {
    const user_id = this.$parent.globalData.user._id;
    const options = {
      $filter: `(owner eq '${user_id}')`,
      $top: 5,
      $select: 'user_b',
      $expand: 'user_b($select=profile,name)',
      $orderby: 'created desc'
    };
    const result = await this.$parent.query(
      'love_friends',
      options,
      this.space_id
    );
    if (result && result.value) {
      this.friendList = {count: result['@odata.count'], value:result.value};
    } else {
			this.friendList = {count: 0, result: []};
		}
    this.$apply();
    return this.friendList;
  }

  async loadGroups() {
    const user_id = this.$parent.globalData.user._id;
    const options = {
      $filter: `(users eq '${user_id}')`,
      $select: 'open_group_id,users',
      $orderby: 'modified desc'
    };
    const result = await this.$parent.query('vip_groups', options, 'guest');
    if (result && result.value) {
      let groups = [];

      _.forEach(result.value, (g)=>{
        g.count = g.users.length;
        if(g.count > 5){
          g.users = g.users.splice(-5)
        }

        groups.push(g)
      });

      this.groups = groups;

    }
    this.$apply();
    return this.groups;
  }


  methods = {
    userLogin(e) {
      const userInfo = e.detail.userInfo;
      const user = this.$parent.globalData.user;
      if (userInfo) {
        const name = user.name || userInfo.nickName;
        const sex = userInfo.gender ? '男' : '女';
        const avatar = userInfo.avatarUrl;

        this.userInfo = userInfo;
        this.isAuthUserInfo = true;
        this.name = name;
        this.avatar = userInfo.avatarUrl;
        this.$parent.globalData.userInfo = userInfo;
        this.$parent.globalData.user.sex = sex;
        this.$apply();

        const url = '/mini/vip/user';
        req.put(url, { name: name, sex: sex, avatar: avatar });
      }
    }
  };
}
</script>
