<style lang="less">
@import "../lib/weui/weui.wxss";
@import "../lib/slds/slds_icons.less";
@import "../lib/slds/slds_margin.less";
@import "../lib/vip/vip.less";
page {
  background-color: #efeef3;
  font-size: 16px;
  font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;
}
.page__hd {
    padding: 40px;
}
.page__bd {
    padding-bottom: 40px;
}
.page__bd_spacing {
    padding-left: 15px;
    padding-right: 15px;
}

.page__ft{
    padding-bottom: 10px;
    text-align: center;
}

.page__title {
    text-align: left;
    font-size: 20px;
    font-weight: 400;
}

.page__desc {
    margin-top: 5px;
    color: #888888;
    text-align: left;
    font-size: 14px;
}
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
.border-bottom-1px {
  position: relative;
  &::after {
    content: " ";
    position: absolute;
    left: 0;
    bottom: 0;
    right: 0;
    height: 1px;
    border-top: 1px solid #C0BFC4;
    color: #C0BFC4;
    -webkit-transform-origin: 0 0;
    transform-origin: 0 0;
    -webkit-transform: scaleY(0.5);
    transform: scaleY(0.5);
  }
}
.border-top-1px {
  position: relative;
  &::before {
    content: " ";
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    height: 1px;
    border-top: 1px solid #C0BFC4;
    color: #C0BFC4;
    -webkit-transform-origin: 0 0;
    transform-origin: 0 0;
    -webkit-transform: scaleY(0.5);
    transform: scaleY(0.5);
  }
}
.after-chevronright {
  position: relative;
  &::after {
    content: " ";
    display: inline-block;
    height: 6px;
    width: 6px;
    border-width: 2px 2px 0 0;
    border-color: #c8c8cd;
    border-style: solid;
    -webkit-transform: matrix(.71, .71, -.71, .71, 0, 0);
    transform: matrix(.71, .71, -.71, .71, 0, 0);
    position: relative;
    top: -2px;
    position: absolute;
    top: 50%;
    margin-top: -4px;
    right: 2px
  }
}
.weui-loadmore__tips_in-line{
  background-color:#EFEEF3;
}
.weui-cells{
  button.weui-cell{
      border:none;
  }
}

.cover-page-bg {
  position: fixed;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	background-image:url('https://lg-otd9qzs8-1257216007.cos.ap-shanghai.myqcloud.com/bg-hands.jpg');
	background-position: bottom center;
	background-repeat: no-repeat;
	background-size: cover;
	background-color: #fdfdfd;
	z-index: 1;
}


.cover-page {
  background: transparent;
  position: relative;
  z-index: 10;
  padding-bottom: 100px;

  .page__hd{
    padding:20rpx 40rpx;
    .love-title{
      margin-top:80rpx;
      color:#00396b;
      font-size:65rpx;
      font-weight:bold;
      text-align: center;
    }
  }
  .page__bd{
    padding:20rpx 40rpx;
    .love-summary{
      color:#00396b;
      font-size:45rpx;
      margin-bottom:40rpx;
      text-align: center;
    }
    .love-attention{
      color: #00396b;
      font-size:35rpx;
      margin-bottom:40rpx;
      text-align: center;
    }
  }

  .btn-join{
    background:#1AAD19;
    padding:6px;
    color:#fff;
    font-weight:bold;
    margin-top:120rpx;
  }
  .btn-love {
    padding:6px;
    font-weight:bold;
    color:#353535;
    margin-top:30rpx;
  }
  .love-licence{
    color:#fff;
    font-size:32rpx;
    text-align:center;
  }
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore, getStore } from 'wepy-redux'
import configStore from './store'
import req from '@/network'
import * as interceptor from '@/network/interceptor'
import { baseUrl, appId, loveSpaceId } from '@/config'
import _ from 'underscore'
import { serverAPI } from '@/server';
import pageRouter from '@/utils/pageRouter'

const store = configStore()
setStore(store)

export default class VIP extends wepy.app {
  config = {
    pages: [
      'pages/visiting_card/home',
      'pages/visiting_card/index',
      'pages/love/index',
      'pages/love/home',
//      'pages/tabbar_index',
      'pages/love/shake',
      'pages/love/share',
      'pages/home/store',
      'pages/index',
      'pages/apps',
      'pages/me',
      'pages/me_profile',
      'pages/coupons',
      'pages/store',
      'pages/card',
      'pages/card_activate',
      'pages/card_billing',
      'pages/card_recharge',
      'pages/card_pay',
      'pages/card_pay_success',
      'pages/card_pay_fail',
      'pages/wifi',
      'pages/event/list',
      'pages/event/view',
      'pages/post/index',
      'pages/post/view',
      'pages/edit/date',
      'pages/card/list',
      'pages/card/select',
      'pages/space/index',
      'pages/space/register',
      'pages/space/list',
      'pages/space/paid_list',
      'pages/record/list',
      'pages/record/edit',
      'pages/record/test',
      'pages/edit/datetime',
      'pages/edit/select',
      'pages/edit/text',
      'pages/edit/textarea',
      'pages/edit/lookup',
      'pages/edit/lookup_child',
      'pages/edit/image',
      'pages/edit/number',
      'pages/edit/location',
      'pages/edit/video',
      'pages/admin/index',
      'pages/admin/qrcode',
      'pages/member_benefits',
      'pages/comment/index',
      'pages/star/post',
      'pages/star/space',
      'pages/consuming_records',
      'pages/home/post',
      'pages/phone_number_login',
      'pages/user_info_login',
      'pages/empty_page',
      'pages/404',
      'pages/record/view',
      'pages/record/create',
      'pages/record/create_child',
      'pages/space/invite_user',
      'pages/product/view',
      'pages/product/list',
      'pages/product/share',
      'pages/cart/index',
      'pages/cart/checkout',
      'pages/address/list',
      'pages/order/list',
      'pages/share',
      'pages/love/me',
      'pages/love/invite_code',
      'pages/love/invite_code_success',
      'pages/love/invite_code_fail',
      'pages/love/find',
      'pages/love/test',
      'pages/love/matching',
      'pages/love/matching_filter',
      'pages/love/matching_result',
      'pages/love/papers_view',
      'pages/love/papers_summary',
      'pages/love/navigation_qusestion',
      'pages/love/cover_about_yourself',
      'pages/love/cover_you_looking_for',
      'pages/love/cover_answer_questions',
      'pages/love/cover',
      'pages/love/detail',
      'pages/edit/city_select',
      'pages/love/introduce',
      'pages/love/introduce_me',
      'pages/love/invite_code_me',
      'pages/love/invite_code_success_me',
      'pages/love/question_list',
      'pages/love/discovery',
      'pages/love/post_recommend',
      'pages/love/cp',
      'pages/love/match_history',
      'pages/love/love_me',
      'pages/love/group',
      'pages/love/privacy_protection',
      'pages/love/settings',
      'pages/love/love_question',
    ],
    tabBar: {
      color: '#666',
      selectedColor: '#5e9bf4',
      backgroundColor: '#fff',
      borderStyle: 'black',
      list: [
      {
        pagePath: 'pages/visiting_card/home',
        selectedIconPath: './images/tabbars/home_pressed.png',
        iconPath: './images/tabbars/home.png',
        text: '名片',
      },
      {
        pagePath: 'pages/product/list',
        selectedIconPath: './images/tabbars/topic_pressed.png',
        iconPath: './images/tabbars/topic.png',
        text: '商城',
      },
      {
        pagePath: 'pages/space/index',
        selectedIconPath: './images/tabbars/me_pressed.png',
        iconPath: './images/tabbars/me.png',
        text: '官网',
      }]
    },
    window: {
      navigationBarBackgroundColor: '#353535',
      navigationBarTitleText: '华炎客服',
      navigationBarTextStyle: 'white',
      backgroundColor: "#efeef3",
      backgroundTextStyle: 'dark',
    }
  }

  globalData = {
    title: "会员服务台",
    userInfo: null,
    space: null,
    spaceInfo: null,
    storeInfo: null,
    launchOptions: null,
    is_login: false,
    objects: {},
    shareTicket: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  onShow(options){
    console.log('onShow', options);
    this.globalData.shareTicket = options.shareTicket;

    //通过分享直接进入page
//    if(options.path == 'pages/space/invite_user'){
//      this.checkMobile()
//    }

  }

  async onLaunch(options) {
    console.log('onLaunch', options);
    req.appId(appId)
    req.baseUrl(baseUrl).interceptor(interceptor.request, interceptor.response);

    this.saveRecentSites(options.space_id);

    pageRouter.setApp(this);

    pageRouter.pushEnter({
      page: '/pages/me_profile',
      script: function (to) {
        return this.checkMobile()
      }
    });

    pageRouter.pushEnter({
      page: '/pages/space/register',
      script: function (to) {
        return this.checkMobile()
      }
    });

    pageRouter.pushEnter({
      page: '/pages/card_activate',
      script: function (to) {
        return this.checkMobile()
      }
    });

    pageRouter.pushEnter({
      page: '/pages/record/create',
      script: function (to) {
        return this.checkMobile()
      }
    });

    pageRouter.pushEnter({
      page: '/pages/space/invite_user',
      script: function (to) {
        return this.checkMobile()
      }
    });

    pageRouter.pushEnter({
      page: '/pages/record/edit',
      script: function (to) {
        return this.checkMobile()
      }
    });

    pageRouter.pushEnter({
      page: '/pages/record/create',
      script: function (to) {
        return this.checkMobile(to)
      }
    });

    pageRouter.pushEnter({
      page: '/pages/love/invite_code',
      script: function (to) {
        return this.checkMobile(to)
      }
    });

    pageRouter.pushEnter({
      page: '/pages/love/cp',
      script: function (to) {
        return this.checkMobile(to)
      }
    });

    pageRouter.pushEnter({
      page: '/pages/love/papers_view',
      script: function (to) {
        return this.checkMobile(to)
      }
    });

    pageRouter.pushEnter({
      page: '/pages/love/introduce',
      script: function (to) {
        return this.checkMobile(to)
      }
    });
  }

  onHide() {
    const store = getStore();
    const cartList = store.getState().counter.cartList
    wx.setStorageSync('cartList', cartList)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }

  checkMobile(to){
    if(!this.globalData.love || !this.globalData.love.enabled || (this.globalData.user && this.globalData.user.mobile)){
      return true
    }else{
      let url = '/pages/phone_number_login';
      if (to) {
        url = url + '?to=' + encodeURIComponent(to);
      }
      wepy.navigateTo({url: url});
      return false
    }
  }

  hasMobile(){
    if(this.globalData.user && this.globalData.user.mobile){
      return true
    }else{
      return false
    }
  }

  saveRecentSites(space_id) {
    if (space_id) {
      let recent_sites = wx.getStorageSync('recent_sites')
      if (recent_sites) {
        const index = recent_sites.indexOf(space_id);
        if (index > -1) {
          recent_sites.splice(index, 1);
        }
        recent_sites.push(space_id);
      } else {
        recent_sites = [space_id]
      }
      wx.setStorageSync('recent_sites', recent_sites);
    }
  }

  async login(e) {
    if(!e){
      e = {}
    }
    const self = this
    let globalData = self.globalData
    let needs_login = false
    if(e.share_from) {
      globalData.share_from = e.share_from//记录分享来源share_from
    }
    if (!globalData.userInfo) {
      const setting = await wepy.getSetting()
      if (setting.authSetting['scope.userInfo']) {
        const info = await wepy.getUserInfo()
        self.globalData.userInfo = info.userInfo
      }
    }

    if (!globalData.user) {
      globalData.user = {}
    }
    if (!globalData.user._id || !globalData.user.auth_token) {
      needs_login = true
    }

    if (!globalData.is_login) {
      needs_login = true
    }

    try {
      const session_vaild = await wepy.checkSession()
      if (!session_vaild) {
        needs_login = true
      }
    } catch (error) {
      needs_login = true
      console.log(error)
    }

    // needs_login = true;

    let space_id = e.space_id, share_id = e.share_id, share_from = e.share_from;
    if(share_id || share_from){
      needs_login = true;
      if(!space_id){
        wx.showToast({
          title: "分享链接未传入工作区ID",
          icon: "none"
        });
      }
    }
    if (needs_login) {
      console.log("=========needs_login============");
      const data = await wepy.login()
      const old_user_id = globalData.user._id || ''
      const old_auth_token = globalData.user.auth_token || ''
      let url = `${serverAPI.LOGIN}?code=${data.code}&old_user_id=${old_user_id}&old_auth_token=${old_auth_token}`

      if (space_id) {
        url += `&space_id=${space_id}`
      }
      if (share_id) {
        url += `&share_id=${share_id}`
      }
      if (share_from) {
        url += `&share_from=${share_from}`
      }

      let ssoData = {};
      let shareTicket = this.globalData.shareTicket;
      if(shareTicket){
        let shareInfo = await wepy.getShareInfo({
          shareTicket: shareTicket
        });
        console.log("==========shareInfo=============", shareInfo);
        ssoData = {
          encryptedData: shareInfo.encryptedData,
          iv: shareInfo.iv
        };
      }

      const res = await req.post(url, ssoData).catch((err) => {
        console.log("cache error...", err);
        return {}
      })

      const header = {
        'X-User-Id': res.user_id,
        'X-Auth-Token': res.auth_token,
      }

      globalData.user._id = res.user_id
      globalData.user.auth_token = res.auth_token
      globalData.user.open_id = res.open_id
      globalData.user.open_group_id = res.open_group_id
      globalData.user.name = res.name
      globalData.user.mobile = res.mobile
      globalData.user.sex = res.sex
      globalData.user.birthdate = res.birthdate
      globalData.user.avatar = res.avatar
      globalData.user.qrcode = res.qrcode
      globalData.my_spaces = res.my_spaces
      globalData.my_customers = res.my_customers
      globalData.love = res.love
      console.log("===============login============globalData.my_customers", globalData.my_customers);

      for (let customer of res.my_customers) {
        if (customer.space == loveSpaceId) {
          wx.setStorageSync("questionnaire_progess", customer.questionnaire_progess);
        }
      }

      req.header(header)

      if (globalData.userInfo && res.name) {
        if (globalData.userInfo.avatarUrl != res.avatar) {
          await req.put('/mini/vip/user', {name: res.name, avatar: globalData.userInfo.avatarUrl}).catch((err)=>{
            console.log("updateAvatarError...", err.data)
          })
        }
      }

      globalData.is_login = true

      self.globalData = globalData
    } else {
      const header = {
        'X-User-Id': globalData.user._id,
        'X-Auth-Token': globalData.user.auth_token,
      }
      req.header(header)
    }
    // await this.respondShare(e);
  }

  async respondShare(e) {
    console.log("===============respondShare==========e=====", e);
    console.log("===============respondShare==========globalData=====", this.globalData);
    if(!e || !e.space_id){
      return;
    }
    let userId = this.globalData.user._id;
    let name = this.globalData.user.name;
    let mobile = this.globalData.user.mobile;
    let my_customers = this.globalData.my_customers;
    let current_customer = my_customers.find((customer)=>{
      return customer.space == e.space_id
    });
    console.log("=============current_customer==================", current_customer);
    if(!current_customer){
      let values = {
        name: name,
        space: e.space_id,
        mobile: mobile
      };
      // 其他cash_back_percentage/cash_back_period等字段通过vip_customers的befor.insert增加
      if(e.share_id){
        values.share = e.share_id;
      }
      if(e.share_from){
        values.from = e.share_from;
      }
      console.log("===============respondShare============values", values);
      let customer = await this.insert("vip_customers", values, e.space_id);
      if(customer && customer.value && customer.value.length){
        this.globalData.my_customers.push(customer.value[0]);
      }
    }

    // 往vip_invites中插入数据
    if(e.naire && e.share_from && e.share_from != userId) {
      const url = '/api/odata/v4/' + e.space_id + '/' + "vip_invites";
      const val = {
        from: e.share_from,
        name: '分享'
      }
      await req.post(url, val).catch((err)=>{
        console.log("[vip_invites error]", err)
        return err.data;
      });
    }
  }

  isSpaceOwner(space_id, user_id){
    if(space_id && this.globalData.my_spaces){
      const space = this.globalData.my_spaces.find((space)=>{
        return space._id === space_id && space.owner === user_id;
      });

      if(space){
        return true;
      }else{
        return false;
      }
    }
    else{
      return false;
    }
  }

  isSpaceMember(space_id) {
    if(space_id && this.globalData.my_spaces){
      return this.globalData.my_spaces.find((space)=>{
        return space._id === space_id && space.profile === "member";
      });
    }
    else{
      return false;
    }
  }

  isSpaceUser(space_id) {
    if(space_id && this.globalData.my_spaces){
      return this.globalData.my_spaces.find((space)=>{
        return space._id === space_id && space.profile === "user";
      });
    }
    else{
      return false;
    }
  }

  isSpaceAdmin(space_id) {
    if(space_id && this.globalData.my_spaces){
      return this.globalData.my_spaces.find((space)=>{
        return space._id === space_id && space.profile === "admin";
      });
    }
    else{
      return false;
    }
  }

  // async cache(object_name, _id, data, reload) {

  //   const globalData = this.globalData

  //   if (!reload) {
  //     if (globalData[object_name] && globalData[object_name]._id == _id) {
  //       return globalData[object_name]
  //     }
  //   }

  //   const space_id = globalData.space_id
  //   if (!space_id) {
  //     return null;
  //   }

  //   let url = `/api/odata/v4/${space_id}/${object_name}`
  //   if (!data || _.isEmpty(data)) {
  //     url = `${url}/${_id}`
  //   }
  //   const result = await req.get(url, data).catch((err) => {
  //     console.log('carch error')
  //     return {}
  //   })
  //   console.log('cache result.................', result)
  //   globalData[object_name] = result.value[0];
  //   return result.value[0];

  // }

  async get(object_name, _id, space_id, query_options) {
    const url = '/api/odata/v4/' + space_id + '/' + object_name + '/' + _id;
    const result = await req.get(url, query_options).catch((err)=>{
      console.log("error...",err.data)
      return {}
    })
    return result
  }

  async query(object_name, query_options, space_id) {
    const url = '/api/odata/v4/' + space_id + '/' + object_name;
    const result = await req.get(url, query_options).catch((err)=>{
      console.log("error...",err.data)
      return {}
    })
    return result
  }

  async insert(object_name,data, space_id) {
    const url = '/api/odata/v4/' + space_id + '/' + object_name;
    const result = await req.post(url, data).catch((err)=>{
      console.log("error...",err.data)
      return false
    })
    return result
  }

  async update(object_name, _id, data, space_id) {
    const url = '/api/odata/v4/' + space_id + '/' + object_name + '/'+_id;
    var doc = {}
    doc['$set'] = data
    const result = await req.put(url, doc).catch((err)=>{
      console.log("error...",err.data)
      return false
    })
    return result
  }

  async delete(object_name, _id, space_id) {
    const url = '/api/odata/v4/' + space_id + '/' + object_name + '/'+_id;
    const result = await req.delete(url).catch((err)=>{
      console.log("error...",err.data)
      return false
    })
    return result
  }

  async invokeMethod(object_name, _id, data, space_id, methodName) {
    const url = '/api/odata/v4/' + space_id + '/' + object_name + '/'+ _id + '/' + methodName;
    const result = await req.post(url, data).catch((err)=>{
      console.log("error...",err.data)
      return false
    })
    return result
  }

  async removeRecord(object_name, _id, space_id, list, owner) {
    space_id = space_id ? space_id : 'guest';
    let allow = await this.recordAllowDelete(object_name, owner, space_id);
    if(!allow){
      return;
    }
    const result = await wepy.showActionSheet({
      itemList: ['删除']
    });
    if (!result.cancel) {
      let result = await this.delete(object_name, _id, space_id);
      if(result){
        list.splice(list.findIndex(item => item._id === _id), 1);
      }
    }
  }

  async getObjects(object_names, space_id){
    if(!space_id){
      throw new Error('缺少参数space_id')
    }

    let objects = [];

    object_names = _.clone(object_names)

    object_names.forEach((object_name, index)=>{
      const o = this.globalData.objects[object_name + space_id];
      if(o){
        objects.push(o)
        delete object_names[index]
      }
    });

    const lastObjectNames =  _.compact(object_names);

    if(lastObjectNames.length > 0){
      const result = await this.get('objects', lastObjectNames.join(','), space_id);
      for(const o in result){
        const object = result[o];
        this.globalData.objects[object.name + space_id] = object;
        objects.push(object)
      }
    }
    console.log('objects', objects);
    return objects
  }

  async getObject(object_name, space_id){
    space_id = space_id ? space_id : 'guest';
    const key = object_name + space_id;
    if(this.globalData.objects[key]){
      return this.globalData.objects[key];
    }
    const object = await this.get('objects', object_name, space_id);

    if(_.isEmpty(object)){
      return {}
    }

    this.globalData.objects[key] = object;
    return object;
  }

  async recordAllowCreate(object_name, space_id){
    space_id = space_id ? space_id : 'guest';
    console.log("recordAllowCreate=======================object_name===", object_name);
    console.log("recordAllowCreate=======================space_id===", space_id);
    const object = await this.getObject(object_name, space_id);
    console.log("recordAllowCreate=======================object===", object);

    if(!object){
      throw new Error('未在globalData中找到对象：' + object_name);
    }

    return object.allowCreate;
  }

  async recordAllowEdit(object_name, owner, space_id){
    space_id = space_id ? space_id : 'guest';
    const object = await this.getObject(object_name, space_id);
    console.log("recordAllowEdit=======================object_name===", object_name);

    if(!object){
      throw new Error('未在globalData中找到对象：' + object_name);
    }

    return object.modifyAllRecords || (object.allowEdit && owner === this.globalData.user._id);
  }

  async recordAllowDelete(object_name, owner, space_id){
    space_id = space_id ? space_id : 'guest';
    const object = await this.getObject(object_name, space_id);
    console.log("recordAllowDelete=========object_name==========", object_name);
    console.log("recordAllowDelete=========owner==========", owner);
    console.log("recordAllowDelete=========object==========", object);
    if(!object){
      throw new Error('未在globalData中找到对象：' + object_name);
    }
    return (object.allowDelete && object.modifyAllRecords) || (object.allowDelete && owner === this.globalData.user._id);
  }

  async generateQrCode(ctx,src1,src2,dx,dy,dWidth,dHeight,color) {
    ctx.drawImage(src1, dx, dy, dWidth, dHeight)
    const radius = dWidth * 105/430
    ctx.arc(dx+dWidth/2, dy+dWidth/2, radius, 0, 2 * Math.PI)
    ctx.setFillStyle(color)
    ctx.fill()
    const avatar_radius = radius-6
    ctx.save()
    ctx.beginPath()
    ctx.arc(dx+dWidth/2, dy+dWidth/2, avatar_radius, 0, 2 * Math.PI)
    ctx.setFillStyle('white')
    ctx.fill()
    ctx.clip()
    ctx.drawImage(src2, dx+dWidth/2-avatar_radius, dy+dWidth/2-avatar_radius, 2*avatar_radius, 2*avatar_radius)
    ctx.restore();
    }
}
</script>
