<style lang="less">
@import "../lib/weui/weui.wxss";
@import "../lib/slds/slds_icons.less";
@import "../lib/slds/slds_margin.less";
@import "../lib/slds/slds_icons_font.less";
page {
  background-color: #f5f5f7;
  font-size: 16px;
  font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;
}
.page__hd {
    padding: 40px;
}
.page__bd {
    padding-bottom: 40px;
}
.page__bd_spacing {
    padding-left: 15px;
    padding-right: 15px;
}

.page__ft{
    padding-bottom: 10px;
    text-align: center;
}

.page__title {
    text-align: left;
    font-size: 20px;
    font-weight: 400;
}

.page__desc {
    margin-top: 5px;
    color: #888888;
    text-align: left;
    font-size: 14px;
}
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'
import req from '@/network'
import * as interceptor from '@/network/interceptor'
import { baseUrl, appId } from '@/config'
import _ from 'underscore'
import { serverAPI } from '@/server';
import pageRouter from '@/utils/pageRouter'

const store = configStore()
setStore(store)

export default class VIP extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/apps',
      'pages/home',
      'pages/me',
      'pages/me_profile',
      'pages/coupons',
      'pages/store',
      'pages/card',
      'pages/card_activate',
      'pages/card_billing',
      'pages/card_recharge',
      'pages/card_pay',
      'pages/card_pay_success',
      'pages/card_pay_fail',
      'pages/stores',
      'pages/wifi',
      'pages/event/list',
      'pages/event/view',
      'pages/post/index',
      'pages/post/view',
      'pages/edit/date',
      'pages/card/list',
      'pages/card/select',
      'pages/space/index',
      'pages/space/register',
      'pages/space/list',
      'pages/space/paid_list',
      'pages/record/list',
      'pages/record/edit',
      'pages/record/test',
      'pages/edit/datetime',
      'pages/edit/select',
      'pages/edit/text',
      'pages/edit/textarea',
      'pages/edit/lookup',
      'pages/edit/image',
      'pages/edit/number',
      'pages/edit/location',
      'pages/edit/video',
      'pages/admin/index',
      'pages/admin/qrcode',
      'pages/member_benefits',
      'pages/star/post',
      'pages/star/space',
      'pages/consuming_records',
      'pages/home/post',
      'pages/home/store',
      'pages/phone_number_login',
      'pages/empty_page',
    ],
    tabBar: {
      color: '#666',
      selectedColor: '#5e9bf4',
      backgroundColor: '#fff',
      borderStyle: 'black',
      list: [
      {
        pagePath: 'pages/index',
        selectedIconPath: './images/tabbars/home_pressed.png',
        iconPath: './images/tabbars/home.png',
        text: '首页',
      },
      {
        pagePath: 'pages/me',
        selectedIconPath: './images/tabbars/me_pressed.png',
        iconPath: './images/tabbars/me.png',
        text: '我的',
      }]
    },
    window: {
      navigationBarBackgroundColor: '#f5f5f7',
      navigationBarTitleText: '华炎客服',
      navigationBarTextStyle: 'black',
      backgroundColor: "#f5f5f7",
      backgroundTextStyle: 'dark',
    }
  }

  globalData = {
    title: "会员服务台",
    userInfo: null,
    space: null,
    spaceInfo: null,
    storeInfo: null,
    launchOptions: null,
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  async onLaunch(options) {
    req.appId(appId)
    req.baseUrl(baseUrl).interceptor(interceptor.request, interceptor.response)
    const globalData = wx.getStorageSync('globalData') || {}
    globalData.is_login = false
    this.globalData = globalData

    pageRouter.setApp(this)

    pageRouter.pushEnter({
      page: '/pages/me_profile',
      script: function (to) {
        return this.checkMobile(to)
      }
    });

    pageRouter.pushEnter({
      page: '/pages/space/register',
      script: function (to) {
        return this.checkMobile(to)
      }
    })

    pageRouter.pushEnter({
      page: '/pages/card_activate',
      script: function (to) {
        return this.checkMobile(to)
      }
    })

    pageRouter.pushEnter({
      page: '/pages/record/edit',
      script: function (to) {
        return this.checkMobile(to)
      }
    })

  }

  onHide() {
    const globalData = this.globalData
    wx.setStorageSync('globalData', globalData)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }

  checkMobile(to){
    if(this.globalData.user && this.globalData.user.mobile){
      return true
    }else{
      const pages = getCurrentPages();
      const page = pages[pages.length - 1];
      wepy.navigateTo({url: '/pages/empty_page?redirect_to=' + encodeURIComponent('/pages/phone_number_login?from=' + encodeURIComponent(to))});
      return false
    }
  }

  async login(space_id) {
    const self = this
    let globalData = self.globalData
    let needs_login = false

    if (!globalData.userInfo) {
      const setting = await wepy.getSetting()
      if (setting.authSetting['scope.userInfo']) {
        const info = await wepy.getUserInfo()
        self.globalData.userInfo = info.userInfo
      }
    }

    if (!globalData.user) {
      globalData.user = {}
    }

    if (space_id && space_id != globalData.space_id) {
      globalData.space_id = space_id
      needs_login = true
    }

    if (!globalData.user._id || !globalData.user.auth_token) {
      needs_login = true
    }

    if (!globalData.is_login) {
      needs_login = true
    }

    try {
      const session_vaild = await wepy.checkSession()
      if (!session_vaild) {
        needs_login = true
      }
    } catch (error) {
      console.log(error)
    }

    needs_login = true

    if (needs_login) {

      const data = await wepy.login()
      const old_user_id = globalData.user._id || ''
      const old_auth_token = globalData.user.auth_token || ''
      let url = `${serverAPI.LOGIN}?code=${data.code}&old_user_id=${old_user_id}&old_auth_token=${old_auth_token}`

      if (space_id) {
        url = `${url}&space_id=${space_id}`
      }

      const res = await req.post(url).catch((err) => {
        console.log("cache error...");
        return {}
      })

      const header = {
        'X-User-Id': res.user_id,
        'X-Auth-Token': res.auth_token,
      }

      globalData.user._id = res.user_id
      globalData.user.auth_token = res.auth_token
      globalData.user.open_id = res.open_id
      globalData.user.name = res.name
      globalData.user.mobile = res.mobile
      globalData.user.sex = res.sex
      globalData.user.birthdate = res.birthdate
      globalData.my_spaces = res.my_spaces

      globalData.is_login = true

      self.globalData = globalData
      req.header(header)
    } else {
      const header = {
        'X-User-Id': globalData.user._id,
        'X-Auth-Token': globalData.user.auth_token,
      }
      req.header(header)
    }
  }

  isSpaceMember(space_id) {
    space_id = space_id || this.globalData.space_id;
    if(space_id && this.globalData.my_spaces){
      return this.globalData.my_spaces.find((space)=>{
        return space._id === space_id && space.profile === "member";
      });
      return false;
    }
  }

  isSpaceUser(space_id) {
    space_id = space_id || this.globalData.space_id;
    if(space_id && this.globalData.my_spaces){
      return this.globalData.my_spaces.find((space)=>{
        return space._id === space_id && space.profile === "user";
      });
      return false;
    }
  }

  isSpaceAdmin(space_id) {
    space_id = space_id || this.globalData.space_id;
    if(space_id && this.globalData.my_spaces){
      return this.globalData.my_spaces.find((space)=>{
        return space._id === space_id && space.profile === "admin";
      });
      return false;
    }
  }

  async cache(object_name, _id, data, reload) {

    const globalData = this.globalData

    if (!reload) {
      if (globalData[object_name] && globalData[object_name]._id == _id) {
        return globalData[object_name]
      }
    }

    const space_id = globalData.space_id
    if (!space_id) {
      return null;
    }

    let url = `/api/odata/v4/${space_id}/${object_name}`
    if (!data || _.isEmpty(data)) {
      url = `${url}/${_id}`
    }
    const result = await req.get(url, data).catch((err) => {
      console.log('carch error')
      return {}
    })
    console.log('cache result.................', result)
    globalData[object_name] = result.value[0];
    return result.value[0];

  }

  async get(object_name, _id, space_id, query_options) {
    const url = '/api/odata/v4/' + (space_id || this.globalData.space_id) + '/' + object_name + '/' + _id;
    const result = await req.get(url, query_options).catch((err)=>{
      console.log("error...",err.data)
      return {}
    })
    return result
  }

  async query(object_name, query_options, space_id) {
    const url = '/api/odata/v4/' + (space_id || this.globalData.space_id) + '/' + object_name;
    const result = await req.get(url, query_options).catch((err)=>{
      console.log("error...",err.data)
      return {}
    })
    return result
  }

  async insert(object_name,data, space_id) {
    const url = '/api/odata/v4/' + (space_id || this.globalData.space_id) + '/' + object_name;
    const result = await req.post(url, data).catch((err)=>{
      console.log("error...",err.data)
      return {}
    })
    return result
  }

  async update(object_name, _id, data, space_id) {
    const url = '/api/odata/v4/' + (space_id || this.globalData.space_id) + '/' + object_name + '/'+_id;
    var doc = {}
    doc['$set'] = data
    const result = await req.put(url, doc).catch((err)=>{
      console.log("error...",err.data)
      return {}
    })
    return result
  }

  async delete(object_name, _id, space_id) {
    const url = '/api/odata/v4/' + (space_id || this.globalData.space_id) + '/' + object_name + '/'+_id;
    const result = await req.delete(url).catch((err)=>{
      console.log("error...",err.data)
      return {}
    })
    return result
  }
}
</script>
